<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CF 补题记录</title>
      <link href="/cf-%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/cf-%E8%A1%A5%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h4 id="Codeforces-Round-761-Div-2"><a href="#Codeforces-Round-761-Div-2" class="headerlink" title="Codeforces Round #761 (Div. 2)"></a>Codeforces Round #761 (Div. 2)</h4><ul><li>D1：通过询问连续的区间，用 $n-2$ 次询问找到一个 $0$ 和一个 $1$ 的位置，再用 $n-2$ 次确定剩下的情况。</li><li>D2：将元素分为每三个一组，先查询每组的情况。由于题目中 $k$ 的特殊范围，可以知道必然有连续的两组返回的结果不同。再从这两组中用 D1 的方法找到一个 $0$ 和一个 $1$ 的位置，使用 $\frac{k}{3}+2$ 次询问。</li><li>发现可以通过已知的两个位置 $a,b$，对剩下的组进行分类讨论。每组 $3$ 个元素共 $8$ 种情况，之前询问出的 $0$ 或 $1$ 可以排除一半，将 $(i,i+1)$ 和对应的元素（$a$ 或 $b$，取决于该组的情况）进行询问，可以再排除一半。最后再询问一次得出结果。可以发现每 $3$ 个元素使用了 $2$ 次询问，即整道题目需要 $n+2$ 次询问。</li><li>E：将固定的转换关系连边，可以将原题转化为树的直径问题。发现树高为 $\log n$ 级别，可以直接暴力跳父亲将需要的部分建出来，计算树的直径即可。</li></ul><h4 id="Codeforces-Round-762-Div-3"><a href="#Codeforces-Round-762-Div-3" class="headerlink" title="Codeforces Round #762 (Div. 3)"></a>Codeforces Round #762 (Div. 3)</h4><ul><li>D：二分答案，如果每一列都至少有一个数大于等于当前二分的 $x$，且至少一行有不少于 $2$ 个数大于等于 $x$，则 $x$ 合法。</li><li>F：按顺序往下排大桌的座位。</li><li>G：并查集维护每个连通块自行爆炸的最短时间，手动引爆时倒着选。</li><li>H：预处理每个位置能跳到的下一个位置、前一个位置和下 $\sqrt{n}$ 个位置是什么，交换元素的时候都交换一下，并且重新跳 $\sqrt{n}$ 次即可消除影响。</li></ul><h4 id="Codeforces-Round-763-Div-2"><a href="#Codeforces-Round-763-Div-2" class="headerlink" title="Codeforces Round #763 (Div. 2)"></a>Codeforces Round #763 (Div. 2)</h4><ul><li><p>D：题解给出了最简单直接的做法。假设机器人在一个 $2\times 2$ 网格的对角线上来回走，则可以设 $x_1$ 为在 $(1,1)$ 时期望的完成步数，$x_2$ 为在 $(2,2)$ 是期望的完成步数，不难得到 $x_1=(1-p)(1+x_2),x_2=(1-p)(1+x_1)$，即 $x_1=(1-p)(1+(1-p)(1+x_1))$，可以解出 $x_1$。现在模拟一个循环，扩展一下上述的方程组，便可以得到形如 $x=kx+b$ 的形式，可以直接解出。注：暴力模拟一个循环即可，但也可以 $\Theta(1)$ 跳下一个有贡献的位置，做到 $\Theta(n+m)$。</p></li><li><p>E：细节题。很容易想到贪心地复制，优先考虑左子树的节点。可以先复原字符串，找出哪些位置复制后更优，再贪心地选即可。注意如果 dfs 过程中左子树已经确定选上，则当前节点也一定选；而只有选了当前节点，再去考虑右子树。</p></li></ul><h4 id="Educational-Codeforces-Round-125"><a href="#Educational-Codeforces-Round-125" class="headerlink" title="Educational Codeforces Round 125"></a>Educational Codeforces Round 125</h4><ul><li>A：最多走两步。如果 $\sqrt{x^2+y^2}$ 是正整数只走一步。</li><li>B：能加就加，不能加就减。这样一定最优。</li><li>C：左括号下一个字符是什么都能同时删掉这一对；右括号找到下一个右括号删除。</li><li>D：显然 $\dfrac{d_1}{h_2}&gt;\dfrac{d_2}{h_1}$ 等价于 $d_1h_1&gt;d_2h_2$，因此贪心地预处理出对于每个 $c$ 最大的 $d\cdot h$，查询时二分。</li><li>E：一个完全图有一个以 $1$ 为根的菊花图作为最小生成树的充要条件是：对于任意一条边 $(x,y)(x&gt;1,y&gt;1,x\ne y)$，满足 $w_{x,y}\ge\max(w_{1,x},w_{1,y})$。必要性考虑最小生成树的定义，充分性可以归纳证明。</li><li>设 $f_{i,j}$ 为当前有 $i$ 个结点连到了 $1$ 号点上，这些连到 $1$ 号点的边中最大的边权为 $j$。从 $f_{i,j}$ 转移到 $f_{i+k,j+1}$ 时枚举边权为 $j+1$ 的边的条数，方案数 $\dbinom{n-1-i}{k}$，新加进去的点还要和剩下已经连到 $1$ 的点连边，边权可以从 $[j+1,m]$ 选择，方案数 $(\dfrac{k(k-1)}{2}+ik)^{m-j}$。</li><li>F：考虑每条路径时，每个位置最多有两个合法的字符。我们定义 $sel_{x,0/1}$ 数组为覆盖了 $x$ 这个点的，最近考虑的串正放/倒放时对应的字符。2-SAT 维护每条路径产生矛盾时的限制条件，对于每个串，该串正放/反放，$x$ 位置填 $sel_{x,0/1}$，会对应产生最多 $4$ 条限制。最后如果有合法答案序列 $ans$ 则依次输出 $sel_{i,ans_i}$。</li></ul><h4 id="Codeforces-Round-779-Div-2"><a href="#Codeforces-Round-779-Div-2" class="headerlink" title="Codeforces Round #779 (Div. 2)"></a>Codeforces Round #779 (Div. 2)</h4><ul><li>A：每两个 <code>0</code> 之间至少有 $2$ 个 <code>1</code>，开头的 <code>0</code> 无限制，直接模拟。</li><li>B：反证法得到题目中所求的 $\gcd$ 最大为 $2$，只有 $n$ 是偶数时将偶数放在奇数位置上，奇数放在偶数位置上方案数为 $(\dfrac{n}{2}!)^2$，$n$ 是奇数答案为 $0$。</li><li>C：对于第 $i$ 次循环变换后的排列，如果有 $p_1&gt; p_2$ 则一定 $c_{i+1}\le c_i$，否则 $c_{i+1}=c_i+1$。所以 $c_{i+1}-c_i\le 1$ 且有且仅有一个 $c_i=1$ 时原序列有解。一种可能的构造方案：从 $1$ 到 $n$ 按照 $c_i$ 从大到小填，遇到 $c_i$ 相同的则先填编号小的。</li><li><p>D：依次钦定原序列中每个位置为 $l$，01-trie 上查询 $a_i\operatorname{xor}l$ 能获得的最小/最大异或值，分别是 $l,r$ 则 $a_i\operatorname{xor} l$ 为答案。</p></li><li><p>E：我们发现，如果先手选择了 $v_{x,y}$，后手无法再走到一个 $v_{x’,y’}$ 使得 $v_{x’,y’}&gt; v_{x,y}$ 则先手下一步还可以走回去，后手必败。问题变成了从每个 $(x,y)$ 出发，是否满足曼哈顿距离 $&gt; k$ 的格子中的权值均小于 $v_{x,y}$。</p></li><li>考虑 DP，设 $f_{i,j}$ 为 $(i,j)$ 是否合法，显然初始对于 $v_{sx,sy}=n^2$，有 $f_{sx,sy}=1$。我们维护一个当前合法点的集合 $S$，并从大到小枚举权值。考虑到当前权值时，如果 $S$ 中所有点距当前点的曼哈顿距离均 $\le k$ 则将当前点加入 $S$ 中。由于 $\abs{x-x’}+\abs{y-y’}\le k\Leftrightarrow\max(\abs{(x+y)-(x’-y’)},\abs{(x-y)-(x’-y’)})\le k$，我们只需要维护当前 $S$ 集合中所有 $(x+y),(x-y)$ 的最大值和最小值即可。</li><li>F：首先，令 $u$ 为原串中 <code>1</code> 的个数，则这个串有解当且仅当 $u\cdot m\equiv 0\pmod{n}$。将原串拼成环形，则必定存在一个长度为 $m$ 的区间中 <code>1</code> 的个数恰好为 $\dfrac{u\cdot m}{n}$。如果这个区间跨过了环的连接处，则 $k=2$，否则 $k=1$。前缀和即可解决。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Records </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3月做题记录</title>
      <link href="/3%E6%9C%88%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/3%E6%9C%88%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>挑选了一些有价值的题记录。<br>不能再咕咕咕了。</p><ol><li><p>P6076 [JSOI2015] 染色问题</p><ul><li>容斥，设 $f_i$ 为至多使用 $i$ 种颜色在行列合法的情况下的答案，最终答案 $s$ 为<script type="math/tex; mode=display">\sum\limits_{i=0}^{c}(-1)^i\dbinom{c}{i}f_{c-i}</script></li><li>计算 $f_i$ 还是容斥，考虑每行每个格子有 $i+1$ 种填法，因为可以留空；最后减去全空的不合法情况。对于列容斥，考虑最多选多少列，可以得到<script type="math/tex; mode=display">f_i=\sum\limits_{j=0}^{m}(-1)^{m-j}\dbinom{m}{j}((i+1)^j-1)^n</script></li></ul></li><li><p>P1848 [USACO12OPEN] Bookshelf G</p><ul><li>暴力 dp 设 $f_i$ 为放前 $i$ 本书的最低高度，容易得到转移 $f_i=\min(f_j+\max(h_j,h_{j+1},\dots,h_i))(j\ge p_i)$，其中 $p_i$ 表示能让 $p_i+1\sim i$ 宽度合法的最靠左的位置。</li><li>用单调栈找出每个点左侧第一个 $h_i$ 比它大的点 $l$。新加入一个点 $h_i$ 时，将 $[l+1,i]$ 这段区间赋为 $h_i$。$f$ 的值确定，所以我们线段树上维护 $f$ 和 $f+h$ 的最小值，转移时从合法区间 $[p_i+1,i]$ 转移即可。</li></ul></li><li><p>CF241B Friends</p><ul><li>考虑在 01-Trie 上先找到第 $k$ 大的值，设其为 $w$。可以通过二分答案在 $\mathcal O(n\log^2\max a_i)$ 时间内完成。</li><li>再考虑统计大于 $w$ 的数对的和，可以预处理 $f_{i,j}$ 表示 01-Trie 上以 $i$ 为根节点的子树中，对应到叶子节点的所有数中有多少个在二进制下第 $j$ 位为 $1$。有了 $f$，我们就可以计算一整段区间的数异或上一个特定的数的异或值的和。考虑在 01-Trie 上对于每个数走一遍，遇到可以统计进答案的子树（子树中任意值大于 $w$）就按位考虑统计答案，这一部分的时间复杂度也是 $\mathcal O(n\log^2\max a_i)$。</li></ul></li><li><p>P2081 [NOI2012] 迷失游乐园</p><ul><li>dp 转移较为容易理解，但转移过程中需要考虑的细节很多。</li><li>约定：$p_i$ 为 $i$ 点父亲的个数（环上为 $2$，否则为 $1$；树上根节点为 $0$），$s_i$ 为 $i$ 点儿子的个数（环上的点不算做儿子）。基环树环上的点称为“黑点”，其余点称为“白点”。</li><li>Subtask 1：对于树的部分，首先设 $f_i$ 为从 $i$ 点开始，第一步向儿子走的期望步数，$g_i$ 为从 $i$ 点开始，第一步向父亲走的期望步数（其余步的方向不限），答案为<script type="math/tex; mode=display">\dfrac{1}{n}\sum\limits_{i=1}^{n}\dfrac{f_is_i+g_ip_i}{s_i+p_i}</script></li><li>考虑 $f$ 和 $g$ 的转移，设 $u$ 的父亲为 $t$，不难得到<script type="math/tex; mode=display">f_u=\dfrac{1}{s_u}\times\sum\limits_{v\in \operatorname{son}_u}(f_v+w_{u,v})\\g_u=w_{u,t}+\dfrac{1}{p_t+s_t-1}\times(g_kp_k+f_ks_k-f_u-w_{u,k}) (p_t+s_t-1>0)</script></li><li>当 $p_t+s_t-1=0$ 时，$g_u=w_{u,t}$。</li><li>Subtask 2：首先将基环树看做若干普通树根节点相连成环的结果，则对于所有点 $f$ 的转移不变，对于所有白点 $g$ 的转移不变。问题集中在如何求出黑点 $g$ 的转移。</li><li>从一个黑点 $u$ 向上走，第一步会走到另一个黑点（环上两个父亲之一），接下来可能走到黑点的子树中，也可能继续在环上走，需要分别考虑。首先钦定走的方向，顺时针逆时针概率均等，因此初始化 $P=0.5$；接下来，按走的顺序枚举环上的 $i$，有以下转移（$nxt_i$ 表示按当前方向环上的下一个点）：<script type="math/tex; mode=display">g_u=\sum\limits_{i}P_i\times(w+\dfrac{f_is_i}{s_i+1})\\P_{nxt_i}=\dfrac{1}{s_i+1}P_i</script></li><li>注意如果走完了整个环，则在环上最后一个点处只能往其子树走，需要特殊考虑。</li><li>实现时要记录环上都有哪些点，这些点的前驱后继，在环上的编号等方便转移。</li></ul></li><li><p>P4271 [USACO18FEB] New Barns P</p><ul><li>LCT 一遍写过，记之。</li><li>并查集维护每个连通块直径的端点，加入新点时用 LCT 更新连通块的形态，同时 split 出新点到原直径两端的距离，考虑是否更新。</li></ul></li><li><p>P7963 [NOIP2021] 棋局</p><ul><li>终于补完了 NOIP 的题。</li><li>自己理解+写完+调完用了大概 8~9h，写了 9kb 的代码。</li><li>32pts 的暴力还是比较好写的：对于每个新加入的棋子暴力 bfs 即可。</li><li>正向添加棋子相当于断开棋盘的一些点从而改变棋盘的连通性，不好维护，因此考虑倒序处理询问，改为删除棋子让棋盘连通，则问题变得好处理了许多。</li><li>连通性问题首先考虑到并查集。一个 naive 的想法是暴力查询 1 类边，用并查集维护 2、3 类边，对于第 2 类边考虑最远能延伸到哪，对于 3 类边维护连通块和连通块边缘可以吃到的棋子。但这样做是错误的：第 2 类边的统计和第 3 类边的统计会发生重复。</li><li>去重是本题的难点。我们先统计 3 类边，在统计 2 类边时将重复统计的删掉。这时候我们不能只用并查集存 3 类边形成的连通块，因为我们关系重复统计的节点的具体编号。发现 2 类边如果按行或列顺序排序后，编号是一段连续的区间，可以想到用线段树维护统计 3 类边时访问过的点横向和纵向的编号，这样可以通过线段树区间查询快速得到重复点的个数；去除棋子，合并 3 类边的连通块时，用线段树合并即可维护。</li><li>注意维护完连通块后，还要考虑连通块外可以吃掉的棋子。我们将每个棋子的等级离散化（这样每个棋子等级不同且不影响答案，可以借用上述查连通块编号时使用的线段树），对于在 3 类边连通块的边缘的两种颜色的棋子各开一棵线段树维护棋子的等级，每次查询等级 $\le lv_i$ 的棋子有多少个。对于 2 类边和 1 类边的吃子情况，可以暴力考虑四个方向，但需要注意判断其是否已经在统计 3 类边连通块边缘时被统计到。</li><li>最后答案减 1，因为不计算棋子自身的位置。</li></ul></li><li><p>P3674 小清新人渣的本愿</p><ul><li>bitset 练手好题，用 bitset 维护加减法是否存在合法，以减法为例，答案就是 <code>(b &amp; (b &gt;&gt; x)).any()</code>。bitset 的单点修改用莫队。乘法暴力枚举约数。</li></ul></li><li><p>AGC032C Three Circuits</p><ul><li>注意三个环覆盖了整个图，所以整个图一定是欧拉回路，每个点的度数一定是偶数。</li><li>其次，设 $d$ 为最大度数，有以下情况需要讨论：</li></ul><ol><li>$d\ge 6$ 一定合法，$d=2$ 一定不合法；</li><li>$d\ge 4$ 且只有一个点度数为 $4$，一定不合法；有三个点以上度数为 $4$，一定合法；</li><li>否则讨论是否为两个度数为 $4$ 的点之间有 $4$ 条链连接的情况，若不是则合法。</li></ol></li><li><p>P4126 [AHOI2009] 最小割</p><ul><li>最小割必经边和可行边的判断。将残量网络缩点成 DAG，只有这个 DAG 上且满流的边可以被割掉。而这些边如果有直接连通 S 和 T 的则为必经边。</li></ul></li><li><p>CF622F The Sum of the k-th Powers</p><ul><li>可以严谨证明原式为 $k+1$ 次多项式。</li><li>考虑拉格朗日插值，预处理前缀后缀连乘积可以做到 $\mathcal O(k)$。</li></ul></li><li><p>CF1202F You Are Given Some Letters…</p><ul><li>设总共循环 $p$ 次，每次循环用到 $c_a$ 个 <code>a</code>，$c_b$ 个 <code>b</code>，那么合法的 $k$ 满足 $k=\lfloor\dfrac{n}{p}\rfloor$ 且 $c_a+c_b=k$。  </li><li>考虑对于一个确定的 $p$ 必须满足的条件，整理可得<script type="math/tex; mode=display">\lceil\dfrac{a}{p+1}\rceil\le c_a\le\lfloor\dfrac{a}{p}\rfloor\\</script><script type="math/tex; mode=display">\lceil\dfrac{b}{p+1}\rceil\le c_b\le\lfloor\dfrac{b}{p}\rfloor</script></li><li>可以枚举 $p$，再用整除分块优化一下即可。</li></ul></li><li><p>P7116 [NOIP2020] 微信步数</p><ul><li>比 NOIP2021 T4 可做了不少。</li><li>发现从每个点开始考虑不好实现，可以改成移动整个高维区域，每一步移动后剩下没有出界的格子为这一步的总贡献；如果走一轮回到了起点，且还有格子没有出界，则为 <code>-1</code>（这一步当时考场上就想到了）。</li><li>设每一步走完后第 $i$ 维剩下的区间为 $[l_i,r_i]$，则 $\prod(r_i-l_i+1)$ 即为这一步产生的贡献。暴力模拟直到所有格子出界，期望得分 45。</li><li>考虑优化。发现第一轮走过后，剩下的格子每一轮的在每个维度上的偏移量是确定的，即每个维度上还合法的点数与轮数成一次函数关系。设 $w_i$ 为当前第 $i$ 维的贡献，$T$ 为最大轮数，则我们要求的是 $\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{T}\prod\limits_{k=1}^{m}\max(0,w_k)$。内层的 $\prod$ 可以暴力求系数，展开成一个 $m$ 次多项式 $f(x)$，然后对于每项的 $a_ix^k$ 只需要求出 $\sum\limits_{x=1}^{T}x^k$ 即可。可以按照 CF622F 的做法，但没必要：$\le 3$ 的直接套公式，$&gt;3$ 的可以暴力预处理。总时间复杂度 $\mathcal O(nk^2)$。</li></ul></li><li><p>P3295 [SCOI2016] 萌萌哒</p><ul><li>学到了 ST 表的另类应用。</li><li>可以类似线段树打标记的形式，将每个区间先拆成 $\log n$ 个小区间进行并查集合并，最后一起下传，下传的形式与倍增类似。</li></ul></li><li><p>2022.3.4 常州集训 T2 algebra</p><ul><li>题意：给定矩阵 $A$，问是否存在正整数 $p$ 使得对于任意正整数 $k$ 都有 $A^k$ 中任意元素不大于 $p$。</li><li>将题目中的矩阵视为邻接矩阵，原题要求的就是该图是否有环。拓扑排序即可。</li></ul></li><li><p>LOJ #6101 「2017 山东二轮集训 Day1」第二题</p><ul><li>是的，「第二题」就是这个题的题目名称。</li><li>考虑找出最低点，然后递归考虑两侧，可以建立一棵笛卡尔树。统计答案时先将子节点的贡献统计完毕，再用总的减去子节点的去计算父亲处的贡献。</li></ul></li><li><p>LOJ #6100 「2017 山东二轮集训 Day1」第一题</p><ul><li>「第一题」。</li><li>对于每个位置维护出最远能到的右端点，可以通过维护前缀和 $s_{0/1,i,k}$ 表示前 $i$ 个数的第 $k$ 位存在多少次 $0\rightarrow 1/1\rightarrow 0$ 的情况，二分判断这个区间是否有 $1\rightarrow 0\rightarrow 1$ 或 $0\rightarrow 1\rightarrow 0$ 的情况，如果没有则说明这是一个合法的区间。</li><li>将所有左右端点维护完毕后，用可持久化线段树维护区间加区间求和，通过标记永久化实现。</li></ul></li><li><p>P2048 [NOI2010] 超级钢琴</p><ul><li>异或粽子的主席树版本。</li><li>主席树查前缀和一段区间的第 $k$ 大，将每个左端点对应的第一大区间扔进堆中，取出堆顶后再放入对应左端点排名下一位的区间。这样贪心地取一定最优。</li></ul></li><li><p>S2OJ #1328 GCD</p><ul><li>先考虑如果题目中的 $f$ 是斐波那契数列我们怎么做。首先，$\gcd(af_i+bf_{i+1},cf_i+df_{i+1})$ 可以通过辗转相减变化成 $\gcd(af_i+bf_{i+1},cf_i)$ 的形式。由 $\gcd(f_i,f_{i+1})=1$，我们可以进一步转化为求 $\gcd(af_i+bf_{i+1},cf_i)$。$\gcd(b,f_i)$ 可以矩阵快速幂求出，设为 $g$，则有如下式子：<script type="math/tex; mode=display">\begin{aligned}&\gcd(af_i+bf_{i+1},cf_i)\\=\ &g\cdot\gcd(\dfrac{af_i+bf_{i+1}}{g},\frac{cf_i}{g})\\=\ &g\cdot\gcd(\dfrac{af_i+bf_{i+1}}{g},c)\\=\ &g\cdot\gcd(\dfrac{af_i+bf_{i+1}\pmod{g\cdot c}}{g},c)\end{aligned}</script></li><li>本题的递推式为 $f_i=9f_{i-1}+12f_{i-2}$，可以发现 $\gcd(f_i,f_{i-1})=3^{\lfloor\frac{n}{2}\rfloor}$，计算结果的时候乘进去，快速幂求 $f_i$ 的时候等价于成原转移矩阵平方后每项除以 $3$，即 $A=\begin{bmatrix}31 &amp; 36\\3 &amp; 4\end{bmatrix}$。</li></ul></li><li><p>P2495 [SDOI2011] 消耗战</p><ul><li>虚树 dp 板子。虚树的思想是每次树上只询问需要用到的点，忽略不需要重复计算的点，可以将复杂度优化到与所有询问的点集大小之和级别。建虚树时用单调栈考虑 dfn 序，将需要维护信息的点与它们所有的 LCA 加入虚树中。</li><li>转移很简单，考虑是否切断当前点到父亲节点的边在虚树上进行 dp 即可。</li></ul></li><li><p>CF1110G Tree-Tac-Toe</p><ul><li>首先发现黑子不可能赢。考虑弱化题目限制，初始所有点均未染色如何做。可以分情况考虑：如果有度数 $\ge 4$ 或度数 $=3$ 但至少两条出边都不是叶子节点的点，则白子必胜。在剩下的情况中，还有一种树的形态白子必胜，如下图：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A              D</span><br><span class="line"> \            /</span><br><span class="line">  C1-C2-...-Cn</span><br><span class="line"> /            \</span><br><span class="line">B              E</span><br></pre></td></tr></table></figure></li><li>不难发现 $n$ 为奇数时白子可以第一步下 <code>C2</code> 来获得必胜策略。</li><li>再考虑有白子被涂色的情况。下图说明了将一个位置涂白等价于在该位置下挂一个分叉：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">W -&gt;  A   </span><br><span class="line">      |</span><br><span class="line">      B</span><br><span class="line">     / \</span><br><span class="line">    C   D</span><br></pre></td></tr></table></figure></li><li>不难发现，若 <code>ABCD</code> 初始均为空，则白棋下 <code>A</code> 后黑棋必须下 <code>B</code>，此时 <code>A</code> 被涂白且轮到白棋落子。</li></ul></li><li><p>S2OJ #331 代数几何</p><ul><li>大型结论+贪心。</li><li>环上错位 $k$ 相当于形成 $\dfrac{n}{\gcd(n,k)}$ 个置换环，排序后每个环上填原序列的连续一段一定最优，环上要从大往小放，大的放中间。</li></ul></li><li><p>S2OJ #332 几何考试</p><ul><li>暴力做法是 $\mathcal O(n^2)$ 枚举每一对，统计贡献。考虑在线段树上完成这个统计贡献的过程，可以先将所有线段按左端点第一关键字、右端点第二关键字排序，然后倒序扫一遍，将左端点相同的一起计算贡献，再一起插入线段树（具体做法见下），统计所有当前线段右侧的线段对当前线段的贡献；同理再正序扫一遍，统计所有当前线段右侧的线段对当前线段的贡献。在这里我们忽略了左端点相同的线段两两间的贡献，最后加上即可。</li><li>如何用线段树维护呢？具体来说，线段树每个节点存下了该位置上累加的二次函数系数，区间修改时为二次函数的叠加，查询时单点查询当前线段右端点对应的<strong>函数</strong>，再代入该函数所对应的未知量求出<strong>函数值</strong>进行贡献。查询时右端点所对应的函数是因为本质上之前加入的每条线段都是对在一个特定区间的<strong>右端点</strong>进行了函数的叠加贡献。</li><li>注：以下“线段 $1$”，“线段 $2$”，分别指代区间 $[l_1,r_1],[l_2,r_2]$，$s_1,s_2$ 指在对应区间内均匀随机的一个取值。</li><li>先考虑倒序，即从右往左插入线段，统计贡献的过程。</li><li>设线段 $1,2$ 满足 $l_1&gt;l_2$，分相交和包含两种情况考虑：<ul><li>相交，即 $l_1&lt; r_2&lt; r_1$，此时可以统计 $s_1&gt;s_2$ 的概率，用 $1$ 减去概率则为线段 $2$ 期望增加的排名。不难发现，有 $P=\dfrac{(r_2-l_1)^2}{2(r_1-l_1)(r_2-l_2)}$。$\dfrac{1}{r_2-l_2}$ 我们在询问时可以单独乘上，因此以 $r_2$ 为未知量，令 $x=r_2$，在线段树上 $[l_1,r_1]$ 这段区间加上 $\dfrac{(x-l_1)^2}{2(r_1-l_1)}$ 这个二次函数的系数。</li><li>包含，即 $l_1&lt; r_1\le r_2$，还是统计 $s_1&gt;s_2$ 的概率，有 $P=\dfrac{r_1-l_1}{2(r_2-l_2)}+\dfrac{r_2-r_1}{r_2-l_2}$，我们仍然可以提出 $\dfrac{1}{r_2-l_2}$ 并以 $r_2$ 为未知量，在线段树 $[r_1+1,+\infty)$ 上加上 $x-\dfrac{l_1+r_1}{2}$。注意这里的贡献区间与相交的情况不同。因为变量和从原式中提出单独计算的部分相同，上述信息可以在同一棵线段树上维护。</li></ul></li><li>再考虑一遍从左向右添加线段时新线段增加的排名期望：</li><li>设线段 $1,2$ 满足 $l_1&lt; l_2$，还是分相交和包含两种情况考虑：<ul><li>相交，即 $l_2&lt; r_1&lt; r_2$，此时只有 $s_1,s_2\in[l_2,r_1]$ 才有可能使线段 $2$ 的排名增加，增加的期望 $E=\dfrac{(r_1-l_2)^2}{2(r_1-l_1)(r_2-l_2)}$，在线段树上维护 $\dfrac{(r-x)^2}{2(r-l)}$，$x=l_2$，此时 $a=\dfrac{1}{2(r-l)},b=-\dfrac{r}{r-l},c=\dfrac{r^2}{2(r-l)}$，在统计时乘上 $\dfrac{1}{r_2-l_2}$。贡献区间是 $[r_1+1,+\infty)$，但扫过该线段右端点时就要清除这个贡献（见下）。</li><li>包含，即 $l_2&lt; r_2\le r_1$，则只有 $s_1\in[l_2,r_1]$ 时有可能使线段 $2$ 的排名增加。<ul><li>$s_1\in[l_2,r_2]$ 时，期望 $E=\dfrac{r_2-l_2}{2(r_1-l_1)}$；</li><li>$s_1\in(r_2,r_1]$ 时，期望 $E=\dfrac{r_1-r_2}{r_1-l_1}$。</li><li>这时我们将上述的两个式子按 $l_2,r_2$ 分一下类，就可以用两棵线段树分别维护以 $l_2$ 为未知量的函数 $-\dfrac{x}{2(r_1-l_1)}$ 和以 $r_2$ 为未知量的函数 $\dfrac{2r_1-x}{2(r_1-l_1)}$。注意这个以 $l_2$ 为未知量的线段树不能和上述相交的情况合并，因为这里不需要统计时乘 $\dfrac{1}{r_2-l_2}$ 的系数。</li><li>上述函数的贡献区间为 $[l_1,r_1]$。</li></ul></li><li>从左往右会遇到一个问题：当当前左端点扫过了某条之前的线段的右端点时，该线段就无法继续贡献。因此我们要在每条右端点处清除该线段对之后的贡献，将上述加入线段树的系数取负再加入一次即可。</li></ul></li><li>我们上述的所有处理都是将左端点相同的线段放在一起进行的，因此最后还要统计左端点相同的线段两两间的贡献。这个比较简单，列出式子维护前缀和后缀和即可，这里不再赘述。</li><li>最后的最后，不要忘了排名从 $1$ 开始，答案要加 $1$。时间复杂度为 $\mathcal O(n\log n)$。</li><li>如果式子有错请轻喷。另外，强烈建议自己独立推导一遍以上全部内容。</li></ul></li><li><p>2022.3.7 常州集训 T1 rsa</p><ul><li>题意：$n=pq,x^c\equiv m\pmod{n},\gcd(c,(p-1)(q-1))=1$，$p,q$ 是质数且 $q-p\le 3\times 10^5$。</li><li>发现 $\varphi(n)=(p-1)(q-1)$ 且 $x^{\varphi(n)}\equiv 1\pmod{n}$。$c$ 与 $\varphi(n)$ 互质，则必然存在一个 $t$ 满足 $ct\equiv 1\pmod{\varphi(n)}$。那么显然 $x^{ct}\equiv x^1\equiv m^t\pmod{n}$，快速幂即可。</li><li>问题简化为如何找到 $p,q$。可以设 $q=p+d$，则 $p(p+d)=n$，解得 $p=\dfrac{\sqrt{d^2+4n}-d}{2}$。当 $p$ 随机且 $p,q$ 间无其它质数时，可以直接枚举 $d$。否则设 $k=\sqrt{d^2+4n}$，得到 $k^2=d^2+4n$，直接从下界 $2\sqrt{n}$ 枚举 $k$ 就能够跑过。</li></ul></li><li><p>2022.3.8 常州集训 T1 permutation</p><ul><li>题意：定义序列 $p$ 的一步变换为 $p_i=p_{p_i}$，求对于所有长度为 $n$，最大值为 $n$ 的 $n^n$ 种不同序列，每个序列能够由多少个不同的 $1\sim n$ 的排列经过有限次变换得到。输出 $n^n$ 种不同序列的合法排列个数和。$n\le 2\times 10^5$。</li><li>递推式 $f_n=\sum\limits_{i=1}^{n}f_{n-i}g_{i}\dbinom{n-1}{i-1}(i-1)!$，其中 $g_i$ 代表大小为 $i$ 的置换环能贡献的答案，有 $g_i=(i+1)^{i-1}$；组合数乘上 $\dbinom{n-1}{i-1}$ 因为可以考虑向已有选择插入数的过程，再为防止算重钦定一下第一个位置放什么；最后 $(i-1)!$ 是置换环的圆排列个数。</li><li>分治 NTT 解决，将原式化为 $f_n=(n-1)!\sum\limits_{i=1}^{n}\dfrac{f_{n-i}}{(n-i)!}g_i$ 即可。<del>跑得比 exp 快多了。</del></li></ul></li><li><p>S2OJ #202 完全平方数</p><ul><li>考场降智了。设 $a+b=\dfrac{n}{2},a=gx,b=gy$，显然有 $ab=g^2xy$。枚举 $g$ 求所有 $x^2+y^2=\dfrac{n}{2g},x\perp y$ 的正整数解即可。另外，可以只找 $\mu(g)=0$ 的 $g$ 进行枚举并取消 $x\perp y$ 的条件，可以优化复杂度。</li></ul></li><li><p>S2OJ #203 素数</p><ul><li>显然用网络流跑二分图最大匹配。但是 $a_i=1$ 是本题处理上的难点。</li><li>将所有 $a_i$ 奇偶分类，和为质数的连边，第一遍排除掉 $1$ 跑最大匹配为 $x$；加进去剩下的 $1$ 跑最大匹配为 $y$，可以计算出有多少对 $1$ 自己与自己匹配。注意最后多出的操作次数可能选择有出边但不在最大匹配上的点，连边时预处理以下有多少点被连上了边即可。</li></ul></li><li><p>S2OJ #204 广播</p><ul><li>感谢这题让我学会了点分树。</li><li>建树时按 bfs 序插入 vector，倒序后在点分树上从 1 开始进行 bfs，每次取当前父亲 vector 中最后一个元素（最近的元素）更新答案后删去。重复这个过程直到所有点都被访问到。</li><li>zx：点分树上的暴力复杂度一般都是对的。</li></ul></li><li><p>2022.3.10 常州集训 T2 chess</p><ul><li>题意：棋盘上只能在左上角填阶梯形，其中第 $i$ 行已经填了 $j$ 个格子对整体的贡献为 $a_ib_j$，求棋盘所有不同填法的贡献和。$n,m\le 5\times 10^5$。</li><li>不难发现如果单独计算某行某个位置的贡献，可以分别计算其右上和左下阶梯形状的方案乘积，即 $n$ 行 $m$ 列的网格有 $\dbinom{n+m}{m}$ 中不同的走法，对于每个点暴力计算可以得到 $\mathcal O(n^2)$ 的做法。</li><li>原式为 $\sum\limits_{i=1}^{n}a_i\sum\limits_{j=0}^{m}b_j\dbinom{n-i+j}{n-i}\dbinom{i-1+m-j}{i-1}$，可以将组合数拆开后令 $k=i-j$，原式可化为如下减法卷积的形式：<script type="math/tex; mode=display">\sum\limits_{k}(n-k)!(m+k-1)!\sum\limits_{i-j=k}\dfrac{a_i}{(n-i)!(i-1)!}\dfrac{b_j}{j!(m-j)!}</script></li><li>用 NTT $\mathcal O(n\log n)$ 碾过去就行了。</li></ul></li><li><p>2022.3.10 常州集训 T1 sequence</p><ul><li>题意：求序列 $a$ 删掉每个 $i$ 时能使得多少个 $a_j(j\neq i)$ 所在的 LIS 长度减小。$n\le 3\times 10^5$。</li><li>DAG 上的支配树模板题。</li><li>在求 LIS 的过程中，后边的元素 LIS 长度增加依赖与前边的元素，由此形成了支配与被支配的关系。考虑建树，对于当前 $i$ 的 dp 值，我们找到其上一层编号最小/最大的节点找它们的 LCA 即为当前点支配树上的父亲。</li></ul></li><li><p>CF1270H Number of Components</p><ul><li>首先需要知道一个结论：序列上每个连通块必然是该序列的一个连续段。证明可以分类讨论。</li><li>发现如果我们枚举一个权值 $w$，将 $\ge w$ 的变成 $1$，$&lt; w$ 的变成 $0$，则最终的合法序列形如 $11\cdots 100\cdots 0$。我们用权值线段树维护对于每个 $w$ 存在 $01$ 交替的次数，pushup 时向上更新最小值及最小值的个数（即，如果某值域区间只有 $1$ 次 01 交替则最小值个数为该值域区间的答案）。预处理时令 $a_0=10^6+1,a_{n+1}=0$，然后对于每对相邻的 $a_i,a_{i+1}$ 都将对应权值段加 $1$（因为 $w$ 在该权值段时 $a_i$ 和 $a_{i+1}$ 必有一个为 $0$，另一个为 $1$），并将 $a_i$ 处的出现次数加 $1$。修改时撤销掉原来 $a_{i-1},a_i$ 和 $a_i,a_{i+1}$ 之间的贡献，再用新权值加入贡献即可。</li></ul></li><li><p>S2OJ #1355 如何优雅地送分</p><ul><li>首先考虑 $2^{F(i)}$ 的意义。发现其在枚举 $i$ 的本质不同质因子的子集，可以考虑改为枚举这个子集 $k$，则恰好有 $\left\lfloor\dfrac{n}{k}\right\rfloor$ 个数字包含 $k$，即：<script type="math/tex; mode=display">\sum\limits_{k=1}^{n}\mu^2(k)\left\lfloor\dfrac{n}{k}\right\rfloor</script></li><li>考虑以下的推导过程：<script type="math/tex; mode=display">\begin{aligned}&\sum\limits_{i=1}^{n}2^{F(i)}\\=&\sum\limits_{i=1}^{n}\sum\limits_{d\mid n}\mu^2(d)\qquad&(1)\\=&\sum\limits_{i=1}^{n}\sum\limits_{d\mid n}\sum\limits_{k^2\mid d}\mu(k)\qquad&(2)\\=&\sum\limits_{k=1}^{n}\mu(k)\sum\limits_{k^2\mid d}\left\lfloor\dfrac{n}{d}\right\rfloor\qquad&(3)\\=&\sum\limits_{k=1}^{n}\mu(k)\sum\limits_{i=1}^{\lfloor\frac{n}{k^2}\rfloor}\left\lfloor\dfrac{n}{ik^2}\right\rfloor&(4)\end{aligned}</script></li><li>式子的后一项就是 $\sum\limits_{i=1}^{n}\left\lfloor\dfrac{n}{i}\right\rfloor$ 可以直接整除分块；注意到当 $k&gt;\sqrt{n}$ 时 $\left\lfloor\dfrac{n}{k^2}\right\rfloor$ 为 $0$，所以 $k$ 枚举到 $\sqrt{n}$ 即可。时间复杂度 $\mathcal O(\sqrt{n}\log n)$。</li><li>$(1)\rightarrow(2)$ 的过程证明如下：</li><li>考虑如果 $\mu^2(d)=1$，说明 $d$ 无平方质因子，$k$ 只能取 $1$ 且 $\mu(k)=1$；</li><li>否则 $\mu^2(d)=0$，在 $d$ 的所有本质不同的质因子 $p_1^{a_1}p_2^{a_2}\cdots p_k^{a_k}$ 中选择出一些 $a_i \ge 2$ 的相乘组成 $k$，若有 $m$ 个数可选，则枚举子集有 $2^m$ 种选法。设可选集合为 $S$，我们选择了 $T$ 集合，则有 $\sum\limits_{T\subseteq S}\mu(\prod\limits_{p_i\in T}p_i)$，可以将 $|T|$ 相同的用二项式定理合并一下，即 $\sum\limits_{i=0}^{|S|}(-1)^i\dbinom{|S|}{i}$，这个式子的值为 $0$。</li></ul></li><li><p>S2OJ #1357 你猜是不是找规律</p><ul><li>首先，一个排列是一个置换环的集合。排好序的排列每个置换环长度为 $1$，乱序的、长度为 $k$ 的置换环需要 $k-1$ 次操作将所有元素放回原位。考虑现在乱序的排列有 $t$ 个置换环，$k$ 次交换能够复原，这时共有 $t+k$ 个乱序的元素，$\dbinom{n}{t+k}$ 可以预处理下降幂解决。</li><li>我们对于选出来的 $t+k$ 个元素进行 dp。设 $f_{i,j}$ 为用了 $i$ 个元素，形成了 $j$ 个置换环，但钦定不能存在长度为 $1$ 的置换环的方案数，有 $f_{i,j}=(i-1)(f_{i-1,j}+f_{i-2,j-1})$。预处理后对于 $0$ 到 $k$ 输出答案即可。</li></ul></li><li><p>P4827 [国家集训队] Crash 的文明世界</p><ul><li>可以先用斯特林数推导原式：<script type="math/tex; mode=display">\begin{aligned}&\sum\limits_{i=1}^{n}d_{u,i}^k\\=&\sum\limits_{i=1}^{n}\sum\limits_{j=0}^{k}\begin{Bmatrix}k\\ j\end{Bmatrix}\dbinom{d_{u,i}}{j}j!\\=&\sum\limits_{j=0}^{k}\begin{Bmatrix}k\\ j\end{Bmatrix}j!\sum\limits_{i=1}^{n}\dbinom{d_{u,i}}{j}\\\end{aligned}</script></li><li>然后考虑 dp：<script type="math/tex; mode=display">\begin{aligned}f_{u,i}=&\sum\limits_{v\in son_u}\dbinom{d_{u,v}}{i}\\=&\sum\limits_{v\in son_u}\dbinom{d_{u,v}-1}{i}+\dbinom{d_{u,v}-1}{i-1}\\=&f_{v,i}+f_{v,i-1}\end{aligned}</script></li><li>剩下的就比较容易转移了。注意当前只是求出了以 $1$ 为根的答案，求所有的 $u$ 可以换根。</li></ul></li><li><p>P6093 [JSOI2015] 套娃</p><ul><li>简单贪心，将所有套娃按 $b_i$ 排序，再按顺序，每次贪心地套进去合法套娃中外径最大的即可。用 multiset 维护。</li></ul></li><li><p>P3703 [SDOI2017] 树点涂色</p><ul><li>深入理解 LCT access 操作的好题。</li><li>发现每次都染色到根类似 LCT 的 access，而每次新开一种颜色，代表着一个点到根节点的颜色数为要走的虚边条数 $+1$。初始每个点颜色不同，即所有边均为虚边。记 $d_u$ 为从 $1$ 走到 $u$ 不同的颜色数，2 操作树上差分，3 操作对于 $d$ 数组线段树维护区间最大值。</li><li>对于 1 操作，我们可以更改 access 的写法。考虑这一过程中一条虚链变成了实链，一条实链变成了虚链，等价于线段树上单点 +1/-1。但考虑到我们找的是原树的节点，因此我们还要暴力找到 splay 上最左侧的点。总体时间复杂度 $\mathcal O(n\log^2 n)$。</li></ul></li><li><p>S2OJ #272 工作</p><ul><li>将 $a_i$ 排序后，每次将最右端的 $k$ 个元素减 $1$。</li><li>但这样的问题是：减完后无法保证 $a$ 序列仍递增。可以找到左端点所在值域段的区间，并减这个区间靠左的一段，这样就保证了 $a$ 序列的单调性。</li><li>平凡的做法是树状数组上二分。时间复杂度 $\mathcal O(n\log^2 n)$。</li></ul></li><li><p>S2OJ #266 大水题</p><ul><li>倍增是解题的核心。</li><li>先对 $T$ 串建出 AC 自动机，跳 fail 边得到根到每个节点匹配了任意 $T$ 总共多少次。线段树上每个节点维护两个数组 $pos,val$，分别代表从 AC 自动机每个节点出发经过线段树当前节点所代表区间的 $S$ 串后到自动机上的节点位置和匹配的次数。</li><li>再考虑修改操作。每次做区间修改时，我们可以记下当前修改串倍增后的信息（在 AC 自动机 $u$ 节点走 $2^k$ 步到达的位置、贡献），线段树上修改时以这次询问的编号为标记，下传时直接将倍增数组复制到线段树完整的节点上（因为长度都是 $2$ 的整次幂）。</li><li>设 AC 自动机上有 $c$ 个节点，时间复杂度为 $\mathcal O((\sum|str|+|S|+Q)\times c\log|S|)$。</li></ul></li><li><p>S2OJ #352 榜滚(ranklist)</p><ul><li>省选原题的弱化版。设 $f_{S,i,j}$ 为当前公布成绩的队伍集合为 $S$，当前队伍想要成为榜一 $a_x+b_x-a_{\max}$ 合法的最小值为 $i$（$a_{\max}$ 为封榜前最大的 $a_i$），达到这个最小值时的 $\sum\limits_{x\in S} b_x$ 为 $j$。</li><li>状态设出来了转移就相对容易了。注意一个队伍的运气对其最少需要的过题数产生的影响。时间复杂度 $\mathcal O(2^nn^2m)$。</li></ul></li><li><p>AGC032D Rotation Sort</p><ul><li>发现一个数只可能被移动一次，或根本不移动。现在设 $f_i$ 为钦定当前第 $i$ 个数不移动，确定前 $i$ 个数状态后的最小值，枚举转移点 $j$，考虑将 $(j,i)$ 区间内的数 $&gt; a_i$ 的右移，$&lt; a_i$ 的左移。这样在最优转移点可以保证答案的正确性。</li></ul></li><li><p>CF493E Vasya and Polynomial</p><ul><li>为方便表述，下面用 $u,v$ 代指题目中的 $a,b$，$n$ 表示 $f(x)$ 的次数。</li><li>首先发现一个性质：对于任意满足条件的多项式 $f(x)=a_0+a_1x+a_2x^2+\cdots+a_nx^n$，必然有 $a_i\le u$，可以分 $a_i=u$ 和 $a_i&lt;u$ 讨论。</li><li>$a_i=u$ 时，$f(x)$ 只有一项。如果 $n=0$ 则只有 $u=v$ 时有解；否则 $f(x)=a_nx^n$，存在满足条件的 $f(x)$ 当且仅当 $t=1$ 且 $u^{n+1}=v$。$u=1$ 时 $v=1$ 无穷多解，否则无解；$u&gt;1$ 是枚举 $n$ 可以 $\mathcal O(\log n)$ 解决。</li><li>$a_i&lt;u$ 时，至多只有一个满足条件的 $f(u)=v$；感性理解，就是 $v$ 在 $u$ 进制下的表示形式唯一。这样就可以在 $u$ 进制下将 $v$ 分解，再带入 $t$ 检验是否满足 $f(t)=u$ 即可。</li></ul></li><li><p>AGC005D ~K Perm Counting</p><ul><li>将所有的数和空位置都看作点，将不合法的限制连边，形成了多条链。每条链不能选两个连续的点，统计时设 $f_{i,j,0/1}$ 为统计了 $i$ 个点，打破了 $j$ 次限制，$i-1$ 和 $i$ 这对点是否打破限制。最后容斥一下即可。</li></ul></li><li><p>P1357 花园</p><ul><li>首先状压时环形的限制可以通过枚举初始状态 $S$，最后求 $f_{n+m,S}$ 的和解决。这样我们就可以矩乘优化了。</li><li>我们矩乘时要同时转移所有的合法状态，所以不能用向量转移，因为会互相影响；初始将合法的 $S$ 在矩阵 $F_{S,S}$ 位置上赋为 $1$，最后求的就是 $\sum\limits_{i=0}^{2^m-1}F_{i,i}$。</li></ul></li><li><p>S2OJ #251 蛐蛐国的修墙方案</p><ul><li>找出所有置换环，二元环在原序列靠前位置放左括号必定合法，剩下的可以搜索每个置换环第一个位置填左括号还是右括号，然后交替填下去。一个很松的时间复杂度上界是 $\mathcal O(n2^{\frac{n}{4}})$。</li></ul></li><li><p>S2OJ #248 跳蚤王国的宰相</p><ul><li>首先以原树的重心为根，发现如果剪掉该重心大小总和 $\ge\dfrac{n}{2}$ 的子树并将它们直接安在另一个节点上，则该节点必然能够成为重心。</li><li>将重心 $rt$ 的所有 $son_{rt}$ 按子树大小从大到小排序，找到前缀和恰好 $\ge\dfrac{n}{2}$ 的位置。对于每个节点，如果前缀子树中包含了它，则将前缀中其它的子树接上，检验是否足够让根节点不再成为重心。否则检查前缀 $-1$ 是否满足条件。需要注意处理的细节和边界问题。</li></ul></li><li><p>S2OJ #249 事情的相似度</p><ul><li>首先求一段前缀的最长公共后缀就是在 SAM 的 parent 树上找到 $len_x$ 最大的 LCA。</li><li>考虑我们每次添加一个新的前缀，相当于从 parent 树的树根到当前前缀的结尾节点染上了一种新的颜色，这个过程本质上就是 LCT 的 access。用 LCT 维护时需要子树颜色覆盖，同时用树状数组维护后缀最大值。</li></ul></li><li><p>2022.3.17 常州集训 T1 trans</p><ul><li>给定序列 $a$，每次操作选择 $i,j$ 使得 $a_i\leftarrow a_i+a_j$，构造方案使得 $a$ 序列每个元素均相等。$n\le 6\times 10^4$，要求操作数 $m\le 10^6$。</li><li>两种思路：一个是想办法凑出 $2^k$ 并用这个数将所有其它数也消成 $2$ 的整次幂的形式，可以找到一对 $(i,j)$ 使得 $\gcd(a_i,a_j)=1$，然后让两个元素辗转相减。有了 $2^k$ 之后可以先将其它所有元素补全末尾的 0，然后考虑 <code>lowbit</code> 进行修改。</li><li>另一种是将 $a$ 奇偶分类，将所有非严格最小的奇数加上最小的奇数，再将最小的翻倍，这样所有数都成了偶数，将所有数字除以 $2$，重复以上过程直至序列满足条件。</li></ul></li><li><p>P3643 [APIO2016] 划艇</p><ul><li>很自然地想到设 $f_{i,j}$ 为前 $i$ 所学校钦定第 $i$ 所参赛，派出 $j$ 艘划艇的方案数，但这样做依赖值域。</li><li>可以将值域离散化成一个个区间，计算第 $i$ 所学校派出的划艇数落在离散化后第 $j$ 个区间的方案数。</li><li>我们可以构造证明从区间 $[0,L]$ 中取 $n$ 个数，要求所有非零数严格递增的方案数为 $\dbinom{L+n}{n}$。回到原问题的转移上，若上一个有学校的区间为 $k$，前 $p$ 所学校不在区间 $j$ 中，$m$ 为 $p+1\sim i$ 中能选的学校数量，方案数为 $\dbinom{m+L-1}{m}$，$L$ 为 $j$ 区间的长度。</li><li>前缀和优化转移即可。注意要改变枚举顺序。</li></ul></li><li><p>S2OJ #280 Deck</p><ul><li>线段树优化建图和 2-SAT 结合的板子。对于每个点预处理出 3 操作管辖的最大区间，线段树上连边即可。</li><li>注意实现细节，需要将操作离线，然后 dfs 统一连边。</li></ul></li><li><p>S2OJ #278 走</p><ul><li>奇怪的搜索     + 剪枝。用 bitset 记录当前的状态，把向左/向右跳转化成格子整体的移动，压缩合法状态数，记忆化搜索即可。</li></ul></li><li><p>S2OJ #268 抽鬼牌</p><ul><li>容斥，显然设 $f_{i,j}$ 为前 $i$ 个数，分 $j$ 段，但两段有可能连在一起形成一大段，所以可以在状态中记录 $k$ 代表中间有几段连成了一大段，容斥系数 $(-1)^k$。</li><li>优化状态的设计方式，设 $f_{i,j,0/1}$，$i,j$ 含义不变，$0$ 代表当前段已经完整地结束，$1$ 代表当前段没有结束，要和后面加入的元素结合形成一大段。$f_{i,j,1}$ 可以理解为当前段伸出一个与下一段连接的接口，即上述 $f_{i,j,k}$ 中的 $k$ 加 $1$。前缀和优化转移可以做到 $\mathcal O(n^2)$。</li></ul></li><li><p>S2OJ #1366 同桌的你</p><ul><li>首先如果对于一棵树来说，容易设 $f_{i,0/1}$ 为当前点是否选择了与子节点连边的最大权值，直接转移。输出方案直接记录每个点选择时的前驱节点即可。</li><li>题目中给定了一个内向基环森林，我们可以对于每棵基环树分别进行考虑。一般的套路是依次断掉环上每一条边跑树形 dp，但在这个题的限制下，我们只需要任选一条边，钦定其是否存在，跑树形 dp 即可。注意到题目给定的内向基环树有很好的性质，我们可以直接将其有向边反向，在树上直接跳就能找到环和环上的边。断开环上相邻的两条边，每条边跑一遍树形 dp，累加答案。</li></ul></li><li><p>S2OJ #1367 Fair Photography</p><ul><li>第一次手写 hash table。</li><li>大致思路就是枚举颜色的集合，哈希表记录左端点，左右端点代表合法区间当且仅当两个端点每种颜色的前缀做差后相等（例如 <code>6 4 2 3</code> 和 <code>8 6 4 5</code> 均可以转化为 <code>4 2 0 1</code>）。时间复杂度 $\mathcal O(2^{\max b_i}n\max b_i)$，卡一卡就过了。</li></ul></li><li><p>S2OJ #1368 Florida</p><ul><li>不妨设我们将所有元素分为了 $S,T$ 两个集合，且 $D(S)\le D(T)$。分三种情况考虑二元组 $(i,j)$ 的限制：<ul><li>$T_{i,j}\le D(S)$，$(i,j)$ 没有任何限制；</li><li>$D(S)&lt; T_{i,j}\le D(T)$，$i$ 和 $j$ 不能同时在 $S$ 中，即限制条件为 $t_i\or t_j$；</li><li>$T_{i,j}&gt; D(T)$，$i$ 和 $j$ 不能放在一起，即限制条件为 $(t_i\or t_j)\and (\lnot t_i\or\lnot t_j)$。</li></ul></li><li>显然这些限制是一个 2-SAT 问题，可以在 $\mathcal O(n^4\log n^2)$ 的时间内解决。</li><li>考虑优化，发现 $D(T)$ 有用的取值只有 $\mathcal O(n)$ 种，证明可以考虑在完全图上找最大生成树，如果从大到小枚举权值，连边表示 $T_{i,j}&gt; D(T)$，当前边的两个端点已经连通且连上这条边后不破坏二分图的性质，则这条边没有必要统计。这样复杂度优化到了 $\mathcal O(n^3\log n^2)$，可以通过本题。</li></ul></li><li><p>S2OJ #1358 Yist</p><ul><li>暴力是 $\mathcal O(\sum\text{deg})$ 的，对于每个点统计一轮贡献 $w_i$，等比数列求和，若 $i$ 在 $s$ 中出现了 $c_i$ 次，则总贡献为 $\dfrac{2^{c_i}w_i}{2^{c_i}-1}$，特判 $c_i=0$ 的情况。</li><li>根号分治将所有点按度数是否 $\ge\sqrt{n}$ 分为大度点和小度点，小度点直接给周围点加贡献，大度点的贡献在统计其相邻小度点的时候加上。</li></ul></li><li><p>S2OJ #1359 Ernd</p><ul><li>对 $S$ 建后缀自动机，在末尾添加字符等于沿着转移边走，在开头添加字符可能停留在当前状态，也可能走到 parent 树上的某个儿子。每次操作对答案的贡献是当前节点 $\text{endpos}$ 集合的大小。为使贡献和最大要尽可能留在当前状态。</li><li>将 parent 树边反向，和原 SAM 的转移边一起构成一个有向图 $G$，在 $G$ 上进行 dp。令 $f_u$ 为从起点出发走到 $u$ 的最大权值和，有转移 $f_v=\max(f_u+siz_v\cdot(len_u-len_v))$，取整串代表的节点 $p$ 的 dp 值即为答案。时间复杂度 $\mathcal O(n)$。</li></ul></li><li><p>CF913F Strongly Connected Tournament</p><ul><li>简述题意：给定 $n$ 个点，在每对点之间连边，若 $i&lt; j$ 则有 $p$ 的概率从 $i$ 连到 $j$，$1-p$ 的概率从 $j$ 连到 $i$。连完边后将完全图缩点，对每个强连通分量重复执行上述过程直到无法操作为止。求期望连边的条数。$n\le 2000$。</li><li>DP。设 $f_{i}$ 为 $i$ 个点的期望连边条数，$f_n$ 为答案。我们考虑在 $i$ 个点的完全图上枚举最后一个强连通分量的大小 $j$，即其它 $i-j$ 个点分别连向了这 $j$ 个点，总共确定了 $j(i-j)+\dfrac{j(j-1)}{2}$ 条边。有如下转移：</li></ul><script type="math/tex; mode=display">f_i=\sum\limits_{j=1}^{i}g_jh_{i,j}(f_j+f_{i-j}+j(i-j)+\dfrac{j(j-1)}{2})</script><ul><li>其中，$g_i$ 表示 $i$ 个点能恰好组成一个强连通图的概率，$h_{i,j}$ 表示在 $i$ 个人中恰好有 $j$ 个人输给了剩下 $i-j$ 个人的概率。注意到这个转移方程中 $f_i$ 会转移到自己，移项就好了。</li><li>$g_i$ 的转移就是简单的容斥，即没有一个点集输给了剩下的所有点：</li></ul><script type="math/tex; mode=display">g_i=1-\sum\limits_{j=1}^{i-1}g_jh_{i,j}</script><ul><li>$h$ 的转移考虑每次新加入一个点时，如果属于输的那 $j$ 个点，则需要输给 $i-j$ 个点；否则需要赢 $j$ 个点：（注意边界 $h_{i,0}=1$，无实际意义，只是方便转移）</li></ul><script type="math/tex; mode=display">h_{i,j}=(1-p)^jh_{i-1,j}+p^{i-j}h_{i-1,j-1}</script><ul><li>时间复杂度 $\mathcal O(n^2)$。</li></ul></li><li><p>ARC087D Squirrel Migration</p><ul><li>对每条边统计贡献。若切断一条边，会形成两个连通块 $S_1,S_2$，不妨设 $\abs{S_1}\le \abs{S_2}$，则一条边最多被经过 $2\abs{S_1}$ 次，取重心为根可以最大化权值和。</li><li>问题转化成了对于所有的 $i$，$p_i$ 和 $i$ 不在同一子树内的方案数。可以容斥，设 $f_i$ 为钦定 $i$ 个点不满足条件，剩下点无限制的方案数。在一个大小为 $s$ 的子树中钦定 $i$ 个点的 $f_i=\dbinom{x}{i}x^{\underline{i}}$，再 $\mathcal O(n^2)$ 背包合并一下即可。</li></ul></li><li><p>AGC015F Kenus the Ancient Greek</p><ul><li>以下 $F_i$ 代表斐波那契数列第 $i$ 项，其中 $F_0=F_1=1$。</li><li>首先最大值必然可以取一对 $(F_i,F_{i+1})(F_i\le x,F_{i+1}\le y)$ 得到。现在我们试图计数。我们称一个能操作 $k$ 次的 $(i,j)$ 为 a good pair of $k$，将 $k$ 相同的这些 good pair 进行一次 $\gcd$ 后的数对称为 excellent pair of $k$，一个 $(i,j)$ 的 excellent pair 代表了所有 $(i,j+ki)(k\ge 0)$ 的 good pair。</li><li>Excellent pair of $k$ 只有 $k$ 个，有 $k-1$ 个可以从 excellent pair of $k-1$ 得到，即 $(i,j)\rightarrow (j,i+j)$。还有一个是 $(F_{k+1},F_{k+1}+F_{k-1})$。这样我们可以 $\mathcal O(\log^2\max x)$ 找到所有的 excellent pair，$\mathcal O(\log\max x)$ 时间处理每组询问。</li></ul></li><li><p>P3293 [SCOI2016] 美味</p><ul><li>按位贪心，从高位到低位考虑 $a_i+x$  和 $b$ 的异或值。假设当前处理到了 $b$ 从低到高数的第 $k$ 位，这一位是 $b$，那么我们只需要查找是否询问的区间 $[l,r]$ 内是否存在一个 $a_i+x$ 满足其第 $k$ 位为 $\lnot b$，换言之，如果到目前为止累加的答案为 $c$，那么就是查 $[l,r]$ 中是否有数在 $[c-x,c-x+2^k-1]$ 中，主席树可以轻松解决这个问题。</li></ul></li><li><p>P5321 [BJOI2019] 送别</p><ul><li>可以用平衡树大力分类讨论，但下面介绍更简洁的 LCT 写法。</li><li>将每个点拆成四个方向单独考虑，对每个点的每个方向找出按题目要求走能走到的下一个位置及方向记为 $\text{next}$，所有点的 $\text{next}$ 构成了一些有向环，每个环断掉一条边后用 LCT 维护。我们维护从每个点出发四个方向的墙是否存在，修改墙的时候先断掉原有指向当前点的边，再根据新的连通性重新连边。注意一个环只断一条边，LCT <code>cut</code> 的同时要连上一条新边。</li><li>由此，修改操作只需要修改墙的状态，并且改变两个端点的连通性。</li><li>查询时先找到从 $s$ 和 $t$ 走半个单位长度后到达的位置，再断掉 $t$ 与 $\text{next}_t$ 之间的边，查询 $s$ 到 $t$ 的路径长度即为答案。</li></ul></li><li><p>ARC096E Everything on It</p><ul><li>容斥，设钦定 $i$ 个元素打破限制的方案数为 $F_i$，答案即为 $\sum\limits_{i=0}^{n}(-1)^iF_i$。</li><li>剩下 $n-i$ 个元素无限制，能组成 $2^{n-i}$ 个子集，故有 $2^{2^{n-i}}$ 种选法；再设 $f_i$ 为 $i$ 种元素每种选不超过 $1$ 次的方案数，显然我们可以枚举将这些元素扔掉一些后划分进 $j$ 个集合中，等价于划分出 $j+1$ 个集合（把扔掉的看作一个集合，加一个元素 $0$ 保证垃圾堆非空），即第二类斯特林数 $\begin{Bmatrix}i+1\ j+1\end{Bmatrix}$。最后考虑将 $n-i$ 个数插入这 $j$ 个集合中，总方案要再乘上 $2^{n-i}$ 个集合是否要插入这 $j$ 个集合的某一个中的方案数，即 $(2^{n-i})^j$。综上，本题答案为</li></ul><script type="math/tex; mode=display">\sum\limits_{i=0}^{n}(-1)^i\cdot 2^{2^{n-i}}\dbinom{n}{i}\sum\limits_{j=0}^{i}\begin{Bmatrix}i+1\\ j+1\end{Bmatrix}\cdot (2^{n-i})^j</script></li><li><p>P6860 象棋与马</p><ul><li>$p(i,j)=1$ 当且仅当 $i\perp j$ 且 $i+j\equiv 1\pmod{2}$。</li><li>不妨令 $a\ge b$，分奇偶讨论 $a$ 的贡献：若 $a$ 是偶数贡献为 $\varphi(a)$，$a$ 是奇数贡献为 $\dfrac{\varphi(a)}{2}$，因为此时小于 $a$ 且与 $a$ 互质的数必然一奇一偶成对出现，我们只算偶数。</li><li>设答案为 $S(n)$，有 $S(n)=2\sum\limits_{i=1}^{n}w_i$，其中 $w_i$ 是 $i$ 的贡献，乘 $2$ 是因为刚才钦定了 $a\ge b$。经过推导可以得到 $S(n)=\sum\limits_{i=1}^{n}\varphi(i)+S(\left\lfloor\dfrac{n}{2}\right\rfloor)$，前一半杜教筛，后一半递归处理。时间复杂度 $\mathcal O(n^{\frac{2}{3}}\log n)$。</li></ul></li><li><p>P3644 [APIO2015] 八邻旁之桥</p><ul><li>$k=1$ 的时候有经典结论：选中位数一定最优。</li><li>$k=2$ 时我们将所有线段按中点从左到右排序，取左边的一部分走左侧某位置的桥，剩下的走右侧某位置的桥。本质上是动态中位数问题，用对顶堆维护。最后取所有对应前缀后缀之和的最小值。</li></ul></li><li><p>AGC010E Rearranging</p><ul><li><p>所有不互质的数对在安排好后相对位置就不会再变化，所以将所有 $\gcd(a_i,a_j)&gt; 1,a_i\le a_j$ 的 $(i,j)$ 连一条 $i\rightarrow j$ 的有向边，这个 DAG 拓扑排序后可以得到一组合法解。</p></li><li><p>后手希望字典序最大，所以拓扑排序用优先队列；先手希望将这个 DAG 重定向使得字典序最小，可以将最小的卡在前面，按点权从小到大连还没有被遍历过的点。最后跑拓扑排序输出答案。</p></li></ul></li><li><p>AGC007E Shik and Travel</p><ul><li>首先二分答案将原题转化为判定性问题，令 $k$ 为当前二分的权值。显然进入一棵子树后必须遍历完所有叶子节点才能离开。</li><li>这里有一种不是很常见的、与判定性相关的 dp 思路。设 $f_u(a,b)$ 表示 $u$ 的子树是否存在一个从 $u$ 到第一个叶子节点距离为 $a$，从最后一个叶子节点回到 $u$ 的距离为 $b$，全程合法且遍历完整棵子树的方案。从 $u$ 的左右儿子进行转移，设 $u$ 到左右儿子的距离分别为 $d_{u,l}$ 和 $d_{u,r}$，有转移式 $f_u(a,b)=f_l(a-d_{u,l},i)\and f_r(j,b-d_{u,r})(i+j+d_{u,l}+d_{u,r}\le k)$。</li><li>需要进行优化。发现当存在 $f_u(x,y)$ 和 $f_u(x’,y’)$ 且 $x\le x’,y\le y’$，那么 $f_u(x’,y’)$ 一定不优，可以忽略掉。将 $f_u$ 的状态按照 $x$ 递增排序，则 $y$ 必然递减。向上合并时增加的状态数为左右子树状态数最小值的二倍，因为可以左右子树交换再转移一次。对于每个 $f_l(a,b)$ 找 $f_r(a’,b’)$ 用双指针维护。</li></ul></li><li><p>CF618G Combining Slimes</p><ul><li>题目允许精度误差，因此我们可以大致认为不可能出现 $\delta\ge 40$ 的权值。</li><li>期望 dp，设 $a_{i,j}$ 为用 $i$ 个格子出现 $j$ 的概率，有 $a_{i,j}=a_{i-1,j-1}\cdot a_{i,j-1}$，再定义 $A_{i,j}$ 为用 $i$ 个格子，钦定最左边出现 $j$ 且仅出现这一个 $j$ 的概率，有 $A_{i,j}=a_{i,j}\cdot(1-a_{i-1,j})$。</li><li>现在我们可以算答案的期望了。令 $f_{i,j}$ 为最右边的 $i$ 个数中最左边为 $j$ 时，这 $i$ 个数期望的和，不考虑 $1$ 的特殊情况，有：</li></ul><script type="math/tex; mode=display">f_{i,j}=\dfrac{\sum_{k=1}^{j-1}f_{i-1,k}\cdot A_{i-1,k}}{\sum_{k=1}^{j-1}A_{i-1,k}}</script><ul><li>分母上除了一个 $\sum\limits_{k=1}^{j-1}A_{i-1,k}$ 是因为我们要求的是分子上的概率在这个特定的可选集合中相对的概率，这里除掉的就是可选集合的大小。</li><li>我们要特殊处理 $f_{i,1}$ 因为 $1$ 左边只能放 $2$。与 $a,A$ 类似地记录 $b_{i,j}$ 为最左边放 $2$ 时用 $i$ 个格子出现 $j$ 的概率，$B_{i,j}$ 为 $i$ 个格子唯一出现 $j$ 的概率。转移与 $a,A$ 的类似。</li><li>答案为 $\sum\limits_{i=1}^nf_{n,i}A_{n,i}$，$n\ge \delta$ 时可以将 $n$ 替换为 $\delta$，改写后就可以矩阵快速幂求解了。</li></ul></li><li><p>P4180 [BJWC2010] 严格次小生成树</p><ul><li>本质上就是找到一条边使得增量 $\Delta&gt; 0$ 且最小。</li><li>对于每条不在生成树中的边，连接后找环上原树边的最大值，如果新边权值等于最大值就找严格次大值。可以倍增维护，也可以 LCT。</li></ul></li><li><p>P4331 [BalticOI 2004]Sequence 数字序列</p><ul><li>我们将所有 $a_i,b_i$ 减去 $i$，这样不影响最后答案且可以将原问题弱化成要求 $b$ 单调不降。发现如果 $a$ 单调递增，$b_i=a_i$ 最优；如果 $a$ 单调递减，$b_i=a_{\left\lfloor\frac{n}{2}\right\rfloor}$ 最优。我们可以将 $a$ 分成一些单调不升的连续段，每段中所有 $b_i$ 都取该段的中位数。但存在一个问题：中位数序列仍可能递减，这时可以用可并堆合并两个区间，动态维护中位数。</li></ul></li><li><p>CF434D Nanami’s Power Plant</p><ul><li>将每个在 $[l_i,r_i]$ 区间的 $f_i(x)$ 拆成一个点，$f_i(x)$ 代表的点向 $f_i(x+1)$ 代表的点连权值为 $f_i(x)$ 的边。这样如果没有题目中第二条限制，原图的最小割即为答案。</li><li>将第二条限制变形成 $x_v\ge x_u-d$，即如果割掉 $x_u$，则在 $v$ 上只能割 $x_u-d$ 之后的边，所以从 $u$ 链上的所有 $x$ 向 $v$ 链上 $x-d$ 连 $+\infty$ 的边。最后考虑边界，链要多延伸一个 $r_i+1$ 再连向汇点，否则会出错。</li></ul></li><li><p>P6880 [JOI 2020 Final] オリンピックバス</p><ul><li>不知道标题啥意思。</li><li>翻转边必须在最短路树上，否则翻转没有贡献。以 $1,n$ 为起点建正/反图，目的是对于翻转边分类讨论。初始答案为从 $1$ 到 $n$ 和从 $n$ 到 $1$ 的最短路和，翻转边时打标记代表这条边不能经过，如果翻转就从 $1$ 到 $v$ 再从 $u$ 到 $n$，并补上中间差的权值。大力分类讨论，代码比较难写。</li></ul></li><li><p>P7916 [CSP-S 2021 T4] 交通规划</p><ul><li>平面图最小割等于对偶图最短路，$k=2$ 可以直接将平面分成两部分，类似狼抓兔子一题，直接跑最短路。$k&gt; 2$ 时射线上的黑白点将周围一圈分成了多个大点，形成了一个点颜色交替出现的环形。将颜色不同的两两匹配（类似括号匹配），可以在对偶图上预先处理出每一对不同颜色点间的最短路，然后类似括号匹配破环成链进行区间 dp 就可以计算了。建图连边时的需要非常精细的实现。时间复杂度 $\mathcal O(k^3+nmk\log nm)$。</li></ul></li></ol><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>$3$ 月悄无声息地来到了尾声。今年的春天，春风并没能送来太多的暖，但学校里的花却开得依旧灿烂。当疫情来到第三个年头，我也多少会感到一些烦躁，还会不时回想那些从前的时光。从铺天盖地的新闻中，至少还能不时地看到一丝希望；在每个看似相同的晚上，至少还有陪伴我的一缕斜阳。感觉自己这个月竞赛提升很多，无论从水平上，还是应有的品格上。学会了接纳迎面而来的挫折与日常不起眼的波折，学会了适时遗忘，性格上也变得比以前更加地坚韧。$4$ 月，希望自己能在省选中给自己的努力一个不错的交代，并继续以一贯的坚持和热爱前进。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Records </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Records 5</title>
      <link href="/records-5/"/>
      <url>/records-5/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Invalid password, please (don't) try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="646f95a8ce0dbc544db86cc59d6cf505fbb2ce0213355bf2918dfb63b46231e1">a5bd511e07d9a435fcd952a8bc8b477f19b757268aecdc86b7eabd23978db0e32effc16c3c8c4d156982abf33a3d0b292eee04861a2e2f09acdadfa0e703cc318f796942bba29c31d3b84ba073601ddd064231198b17b7653f4425d1a4ddaa7d6475e66a9d79fe54e67c0e53b0fc30975f8898e635c1602d9d4ade5a604ad21b16861949a4da169bdf26e6de1ef0b058a1bc0801bf995cd7e1126d2c18ace6bfaa67828d4b2f4c0b889b22789c18bc530876837fa1efe24a3604583cbea05ebe52490f56d106fef5f86b684bbc25909b9b9b147ce98f0feb2d217bbfc8341c4972401b0b5f1c76a1a690a05191a8388a9b01c983083d2e5703f8f03b9276ec7e4d10b458a6f36b4825403326c5dd081e14dbd4bdd8a30a6157044370f38ff5e29bf18ba7f4c1aaa56503e1715b84ae03f1a826546fc20bd34e36d5faa0079a976b9ada6ec89d33631d9e908b2640cd33d44da6a774a151c408476df39df9f4806941004af59fccd503c1548dce7c990e16f44f9f3069604841be18a126a57f2f5c3bca6be55ab5827744d3701ad583e1d37f394ffc9f0edef620d520795e0e926291a7e3c18d7c96362a2649b6bf3566c763fa7f133ce6e719857ebb23b304f686a922f95ef00ffcb4c1228372189771593f9e0483ecc900771f125ca0fc3cbb3ce699e20c4d32a49f7b7f0a1899db1eb76ebbbe0b8e251011be4c638a3c00f494cd3e8f29c67c9de6c52feb26db997ff66ab3152bfb236a8897bded32c3c7612fe8eaa0d4f2f11fd8ebea901866b986d1d8d5fdf1668c0770ab3ceb139e5ca449cc4115ee6ca5bc9a0991de7b1e48f6bb482c224825608b5dab3cff517923c2895608e7806c03afe2a0f895d7bb219b84d6100fb0eb35bd27a270c35d77bcf4ec712df2fc1f1c3dce96cae1a312b3741474864ca437726273bce77981bc518a6d2fb310cd586cca8bede29f79a18b9c9158299ba8f968674e752fc164a06df451f599443ad88dbe35ac8afa366864f04105ea66427ae5e4e2c9320c8c0c3a4f30cf4372b3d1417f3b0d413276b04a010f35d8d836940045b25a3caf1724a2ed92ad919c67e2476269355c47523eddf2cc55d72571ad84e2a12ca0fce8c492a3c6cacfc885816acaa9048bf8c8bb61e379d53c9e9353828db3c2b71874fa1aa7ce88de61c7a31d97f0147eeff83648f6c1bfdcfd0aa82d8e69b23413d29eaf433d9b65254b2f75e49fb55e8ec9f11df051f0f5588bafc9cb1a156c5effecf43114d4a6a1a9d78bf4abbbe159678d5575316a29d6637272fc99b0697b331160f4920a2849ba2248ba6cdba345fb3b3c30b576de5662f677d417e8ac7b409c08eef0e01393fb40e4f79c243e8a71dbde56bd2244723cf732cfe5ca010cad6dca752ef357f73f719f2c76a89bad4ed07212e23bde1502ff5ffa22faaea035691a591fd391ff090cbddec7c0eea47c61119034f4de8d60219e8032967e4124b2c6ed0ba229c42351f48adf947841b73fbf9c049e05604c1c0133948192a949dd9f2abe52491f6c236504cff0d515411404ad642b9bef73b2d7c1f459021d7fe2dfc12b61d255483d142aaab9df63960b3fbbf49c7fa839ea2743ed51dda74c345666350b04c69145c2070fbaf70253be08c5af90fb52f94a8979186da29bfa5a8748337a95859c3ac8be76246c3b00a847bce417708aa8e5014e4ef7c67bc369371c0805cd837ac212f6b9d03a7036593645150affd84abf53ee1e4bb65b6bf677e22223ccb956b6803aedb912d40a7a97461997c34c620e635d4c92d51fd4cf69810293655926e9d16b11c30e6bf82671fdb8d1a42565cddeef6585c3489aec0ac27c7c1ad6e2dccbfd56888c769c55f1ea593c1e12362a3a77c19920976f262394e2af77c4d7a4d81c56a6bb79307eb1e698190d8bd0ee2940967e2c32ab9d5451741421377240a26fa333dde9ffeb15f931727b3b953e702a35079622400f0d60fddb53d301c8235306996aa97099faae388d349497ca1e940c4178c4d185038c4c05554ce7cc325c2c295ce43b8de26b6e177af25592f312f5fdc3c76b6bff1f0a1a3f658728bdabadac9d36f7b9329ca3a3fe69d94998616202380ee6c9168da1143c30263be4c9fdb698fe15dfaed1603482a0fb016c0cf29feac77c552a08568117054f4cc24373e73754903d09479e98cde27493a199de2552af29c002da0a28e1aaebcc03b853710a434a136b4af1f5365043807c0e49faa406c035cf0efa19d1a15e523c7b63ebf08e6c621d1e8e3ecb17aafb29dd4355fb5515f5d77903653abbca8b0e78f7108c2ac49f61b8d97e04538ba128b1112ff2151395b34a426c77bc07bf6f97dc8e16f436274f13b61f501a9d90dcef194c21b232201e307ce7eb8ded8fd08713aa9b9bce1a0b7339b2a640cb9c02cc0a566e0803b99f6d0b0f8b0bc45720cc0befcad36747ff6a832a04132880037c04f0bac4b1c352ed608c4d9e66ac3b251d8945575c42250218ac00d0aa1f75ddff153f1e69a64163b2b96228c19f094ee2f1c374d4cbb20eafd4f742617d8f3f3b15a72f0cf88f53d582e5fc98fed6829aeb9b70f30fceea537cab82a6ce4925c791362a35a661005b85eea1278f0dc1737921c877c7f4485f7341a829aaa9d334838e07f382a8f2781658d19b52edb89f3782b84a9b2baa27f10780d374fd0f2fa3e37dd31108db1a7550e9bc896b36963a2fbb06b25810a5f5ff637cb8e29b5128fa69b27a506db8eb08a853835fef812d30817c250ba02d6c5e8abbdb59107c5f17f79cdffc561480aad548acff2113ecc9b565d041d852dea4f355d809a256f57ebba7bd4fa6961322ee0531de1fdf421dcd73d1fd4d3890a716186e7636240aaab8865b08a377cb786c68de1d20e70421b98dbbb259dd49cf86c57a7a356a244415ea37f3067567708c305237b940683aaa3155aaeeb8ab1f708bbbbe432920f1da298b53853eb6e61f5b3e6ac00ca743faeda772a8b0d1e0283d52d7486e6bf8652a0790e95f9a06810bcbbd065e11afa89ae7c2abb61a67144847af02743a2e987c1cd1ec3e005f62775574ae8d8c51315c567a77a3da47902fb38d72dd81ff6ee38d57cb31863fff9d446406dfc8db3cbe3a9fd52cdcda52907aee63910ad7fc60c193bc39ca11ab2d1f83706d1f264007d011a5d7064228667ce57c8509c78b13cb91cbd2618171e1e75254749cabbd6b32a41dd64a098d83c4696821d21ded7a0c2aec2fcb9d7e8e6990f8919c382a73d60dc13a0f2a220e3b5e6e919161f835a85c34b0229e2b03824e733f58dc492e355993ff2d3b0bb7dc7a707b2fb4e4abcb7adc6e310b732210036d3e5cac1f41e41720246079b6744e2a3a8f6a05e5631089ab5d9c2d68c7468f37235feb0d4a9dd75172a49ef15453740c044eed1519b944eb83c4ae079d09fcef6612279e8905068db6df95cee5e78fff6b34d2973072b0469a24d77bbbba3f85b87b01d16ed9994c4572307bb49b2326aab430ba8db43e6378c7db5cc8d34c34dad0f4b8e4bf2f3f79062982125a3b15c2c3141e84a828a4199d8cb49b28a7d5c75f3c62f96f6ee5eccbe1eae8f50067ddbc4be8063bc666a0f1db11507349d2e01ac145f83fa06833b217626d7abd30c57f456c67aaf1144878b0c9fbbed7866247e4a8cbd9acb993a40bc928709f86bfb7554dbfc148b54293004e9b2847e2001494a51dc1723187cf5e3f697539dbbe082db90ff35bc700065cdead3b2f3d3f21892bf0e3a263d4454a11846f4381b568635d2b5faae53b834f43640fcee0f102d69404741ef4dc6c92a8db4db3503cdbd480b3c426b0abd3f7ec8b35f932bdd394a6ae077b527cdf8ce1f77fa4dc3a86e5d5d2be6dc617b5841df163b1917ed2b2e20026c343d8579c405be6401aee1e01048c31fef6b5ed27e26d12b987c6ddb1e2943fef4fdf25764e9fac4efe61f84dcacd19f7d136ad94a6b519b43c639a505960657e301f5a7c792eeeb2314f8e8e96b79186de6aa127554eaecb0f115c5f080f65aef85b7b03f5955d46fca2c1cc55582e56bed0a9e56959f082b3bbcd233404eaaab369270be769e1abc09168ae3900e0cabed6e5be9524205eee3ff9671b8d8fb1a7de294beff88c57f6353513d5d9161d07b13ebcaadd83706e321c4b5436d627024500d31e7337fc70633d89c54f7c07e6825cca4409ea1e1d25ae87ca591ff2e6246898dbdd82b3c9385b9087ef0a3fdc6e940c8d6410f92fb31c22db21340f9f2f515ba598ec00838a55c5ccd1e100ddd209be70e63ca4449a0a69b344c228d88035134e78245970644f7451672506edc80fbe5d92bbdf05533803db0845276acd20bf18e1d29a6953201c15c0693c97330d1313dd5c4f91bcdf44563a9715151643259caadf460fe74eb59b3b3ac26f1216fe6d2c426f8c8754e24a1f199b8c53f2af697b2afd5a68184d5599b3ffa1a032d093e8a340d5059b9a3883b02a42d4ac07f26a39cf8f0774aeca334cf3eb64cadbf9a1c43ee98994894ea546a7c75f59336c9cb4bdca059c4b82d2b8ab5b1a6879062d14e40fabc53f3ee70396120384a7fcd31a1dbc6f5483a67a5c975cadb2e62868166c71356d068e6e3d7ca317db29d2b0d5be6f763913a4fb1f068f26b05ec14bcd5b895a92319dbac1525c04e5de22fa97706f57c52912f7960de918374405ea51a028b7f338543940d329cb9cb0a9a9ffa2040db01b0dad8616d7df57a030f8830f166c7fd932450703c8a464e32136cba639bbb8915c6936a53e0b6f5764f7d52b8a10968f7168d3b82ee5697ae04321cf61d65f10a9c2a04f1faec2dad5ff5f586c13436172f049734b5c9a765802b9353878af8783573ecdbb44fba9cc6d740e750e4259da95c2befe43e1aa835bd3c7f912184617c3e26591e7e89f7a5ffc9a90e27ea2b8fe48cf3be4e5c2cff1488082a4e92cbe1850dd5152e93d84a3771fb57a5a523499295f9fb2dc17a3ed1b982c670e87918081aaa4b327b3f1bd11ea11b1176469b60179bb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="Post hidden.">Post hidden.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Records </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gym103409H Popcount Words 解题报告</title>
      <link href="/gym103409h-popcount-words-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/gym103409h-popcount-words-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>值得借鉴的神仙倍增思路。</p><p>发现 $\text{popcount}(x) \bmod 2$ 有倍增对称性。记原题 $w(0,2^k-1)$ 表示的串为 $w_{k,0}$，$w(0,2^k-1)$ 按位取反表示的串为 $w_{k,1}$，有下列递推式：</p><script type="math/tex; mode=display">w_{0,0}=0,w_{0,1}=1\\w_{i,0}=w_{i-1,0}+w_{i-1,1}\\w_{i,1}=w_{i-1,1}+w_{i-1,0}</script><p>由上式可知：任意 $w(l,r)$ 都可以由 $\log r$ 个 $w$ 串相加得到。</p><p>将原题 $n$ 个区间分解，得到 $n\log V$ 个区间 $w_{k,i}$。</p><p>对于所有询问串，建立 AC 自动机，基本的做法是将原串 $S$ 在 AC 自动机上跑一遍，统计每个询问串对应节点 fail 树的子树和。</p><p>本题不能暴力将串 $S$ 输入进自动机，但字符串具有可倍增的性质，考虑 dp。设 $f_{0/1,k,u}$ 为当前在 $u$ 节点，在 AC 自动机上继续走 $2^k$ 个节点，$0/1$ 代表当前走的串是 $w_{k,0}$ 还是 $w_{k,1}$，能到达哪个节点，倍增转移。</p><p>有了 $f$ 数组，我们可以利用类似打标记的思想，设 $g_{0/1,k,u}$ 为有多少个区间 $w_{k,0/1}$ 以 $u$ 为起点，倒序倍增下传标记。最后对于每个自动机上的节点 $u$，答案为 $g_{0,0,u}+g_{1,0,u}$。最后输出作为询问串结尾节点 fail 树子树的点权和即可。</p><p>核心代码如下：</p><p>分解 $w(l,r)$：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void split(int l, int r, int ql, int qr, int coef)&#123;</span><br><span class="line">    if(ql == l &amp;&amp; r == qr) return vec.push_back(make_pair(coef &amp; 1, __lg(qr - ql + 1))), void();</span><br><span class="line">    int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">    if(qr &lt;= mid) split(l, mid, ql, qr, coef);</span><br><span class="line">    else if(ql &gt; mid) split(mid + 1, r, ql, qr, coef + 1);</span><br><span class="line">    else split(l, mid, ql, mid, coef), split(mid + 1, r, mid + 1, qr, coef + 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>$f$ 数组的倍增转移：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(int i = 0; i &lt;= tot; ++i) f[0][0][i] = ch[i][0], f[1][0][i] = ch[i][1];</span><br><span class="line">for(int i = 1; i &lt;= 29; ++i)&#123;</span><br><span class="line">for(int j = 0; j &lt;= tot; ++j)&#123;</span><br><span class="line">        f[0][i][j] = f[1][i - 1][f[0][i - 1][j]];</span><br><span class="line">        f[1][i][j] = f[0][i - 1][f[1][i - 1][j]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>$g$ 数组的倍增转移：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(int i = 29; i &gt;= 1; --i)&#123;</span><br><span class="line">    for(ll j = 0, t; j &lt;= tot; ++j)&#123;</span><br><span class="line">        if(t = g[0][i][j]) g[0][i - 1][j] += t, g[1][i - 1][f[0][i - 1][j]] += t;</span><br><span class="line">        if(t = g[1][i][j]) g[1][i - 1][j] += t, g[0][i - 1][f[1][i - 1][j]] += t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Solutions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计数题选做</title>
      <link href="/%E8%AE%A1%E6%95%B0%E9%A2%98%E9%80%89%E5%81%9A/"/>
      <url>/%E8%AE%A1%E6%95%B0%E9%A2%98%E9%80%89%E5%81%9A/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Invalid password, please try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="aa1dada040ab553cbac507e50a6c30580a6ede62ce3008cfab818d4632d20cff">6bff1a8fbe7110db0217ecb0578be3a6265fef4e51cb7c2b3bdbc71e4eabb04a5e02eab42765486b690ee22c6bdd24e924f10d362a1431e913593f3d7d4bc7ac72f038a252916966420b2e6c2f2cbc33dcdb178ef317ad10e2ae8c7a92cc42eae21a046ecd725d836c59c840bd4499ba</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="This post is not yet finished. Enter password to read.">This post is not yet finished. Enter password to read.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Records </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式学习笔记</title>
      <link href="/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>记录了多项式基础内容的一些理解和推导过程。<br>鸣谢：<br><a href="https://www.cnblogs.com/zmyzmy/p/14159779.html">BILL666 的多项式全家桶博客</a><br><a href="https://oi-wiki.org/math/poly/intro/">OI-Wiki 多项式部分</a></p><h4 id="0-前置知识"><a href="#0-前置知识" class="headerlink" title="0. 前置知识"></a>0. 前置知识</h4><h5 id="多项式的系数表示和点值表示"><a href="#多项式的系数表示和点值表示" class="headerlink" title="多项式的系数表示和点值表示"></a>多项式的系数表示和点值表示</h5><p>令 $F(i)$ 表示一个 $n$ 次多项式，$F(i)=\sum\limits_{i=0}^{n}a_ix^i$ 为 $F(i)$ 的系数表示。<br>将不同的 $x_0,x_1,\dots,x_n$ 带入 $F(i)$，会对应得到 $y_0,y_1,\dots,y_n$，即在平面直角坐标系上取两两不同的 $n+1$ 个点 $(x_i,y_i),i\in[0,n]$，这 $n+1$ 个点便可以唯一确定 $F(x)$。我们称 $\{(x_0,y_0),(x_1,y_1),\dots,(x_n,y_n)\}$ 为 $F(x)$ 的点值表示。</p><h5 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h5><p>见高中数学必修 $2$。</p><h5 id="单位根"><a href="#单位根" class="headerlink" title="单位根"></a>单位根</h5><p>在复平面上，以 $1$ 为半径作圆，所得到的圆叫做单位圆。<br>将单位圆 $n$ 等分，将单位圆的 $n$ 等分点所代表的复数称为 $n$ 次单位根。<br>令 $\omega_n$ 表示 $n$ 次单位根，有 $\omega_n^0=\omega_n^n=1$，$\omega_{n}^{k}=\cos k\frac{2\pi}{n}+i\sin k\frac{2\pi}{n}$。</p><p>单位根有如下性质：  </p><ol><li>所有的 $\omega_n^i,i\in[0,n)$ 不同。</li><li>$\omega_{2n}^{2k}=\omega_n^k$。</li><li>$\omega_n^{k+\frac{n}{2}}=-\omega_n^k$。</li></ol><p>单位根反演定理：<br>$[n\mid k]=\dfrac{1}{n}\sum\limits_{i=0}^{n-1}(\omega_n^k)^i$。</p><h5 id="原根"><a href="#原根" class="headerlink" title="原根"></a>原根</h5><p>定义：设 $p$ 是正整数，$a$ 是整数，若 $a$ 模 $p$ 的阶等于 $\varphi(p)$，则称 $a$ 为模 $p$ 的一个原根，记 $a$ 的最小原根为 $g$。<br>$998244353=7\times 17\times 2^{23}+1,g(998244353)=3$。<br>原根满足上述单位根的性质，即 $(g^{\frac{p-1}{n}})^k\equiv \omega_n^k\pmod{p}$。注意此处必须满足 $n\mid p-1$。</p><h4 id="1-FFT"><a href="#1-FFT" class="headerlink" title="1. FFT"></a>1. FFT</h4><p>令两个多项式 $A(x),B(x)$ 相乘，结果为 $F(x)$。<br>FFT 的基本思路是将 $A(x),B(x)$ 求值转化为点值表示，在点值表示下直接相乘得到 $F(x)$ 的点值表示，最后将 $F(x)$ 插值转化回系数表示。<br>点值相乘的复杂度为 $\Theta(n)$，现在需要 $\Theta(n\log n)$ 进行求值和插值的过程。<br>以下的 $n$ 均为 $2$ 的整次幂，当次数不足时将高位补全即可。<br>设 $f(x)=a_0+a_2x+\dots+a_{n-2}x^{\frac{n-2}{2}},g(x)=a_1+a_3x+\dots+a_{n-1}x^{\frac{n-1}{2}}$。<br>将 $A(x)$ 按奇偶性分类，即  </p><script type="math/tex; mode=display">\begin{aligned}A(x)&=a_0+a_1x+\dots+a_{n-1}x^{n-1}\\&=(a_0+a_2x^2+\dots+a_{n-2}x^{n-2})\\&=f(x^2)+x\cdot g(x^2)\end{aligned}</script><p>带入单位根，根据单位根的性质可以推导出<br>$A(\omega_n^k)=f(\omega_{\frac{n}{2}}^k)+\omega_n^k\cdot g(\omega_{\frac{n}{2}}^k),A(\omega_n^{k+\frac{n}{2}})=f(\omega_{\frac{n}{2}}^k)-\omega_n^k\cdot g(\omega_{\frac{n}{2}}^k)$。<br>这样我们计算 $A(\omega_n^k)$ 时可以同时得到 $A(\omega_n^{k+\frac{n}{2}})$ 的值，求值的复杂度成功优化到了 $\Theta(n\log n)$。  </p><p>考虑插值。我们现在已经求出了 $F(x)$ 在 $\omega_n^0,\omega_n^1,\dots,\omega_n^{n-1}$ 处的点值，希望求出 $F(x)$ 各项的系数 $b_i$。<br>我们构造 $h(x)=\sum\limits_{i=0}^{n-1}F(\omega_n^i)x^i=\sum\limits_{i=0}^{n-1}\sum\limits_{j=0}^{n-1}b_j(\omega_n^i)^jx^i$。<br>将 $x=\omega_n^0,\omega_n^{-1},\dots,\omega_n^{-(n-1)}$ 带入 $h(x)$，有  </p><script type="math/tex; mode=display">\begin{aligned}h(\omega_n^{-k})&=\sum\limits_{i=0}^{n-1}\sum\limits_{j=0}^{n-1}b_j(\omega_n^i)^j(\omega_n^{-k})^i\\&=\sum\limits_{i=0}^{n-1}\sum\limits_{j=0}^{n-1}b_j(\omega_n^{j-k})^i\\&=\sum\limits_{j=0}^{n-1}b_j\sum\limits_{i=0}^{n-1}(\omega_n^{j-k})^i\end{aligned}</script><p>由单位根反演，可以得到 $h(\omega_n^{-k})=\sum\limits_{j=0}^{n-1}b_jn[n\mid j-k]=nb_k$。<br>所以我们求出 $h(x)$ 在 $x=\omega_n^0,\omega_n^{-1},\dots,\omega_n^{-(n-1)}$ 处的点值，再除以 $n$ 即为答案。  </p><p>这样我们就在 $\Theta(n\log n)$ 的时间内完成了多项式乘法。  </p><p>但如果直接模拟上述过程，需要递归实现，常数过大。考虑优化，可以把每个数直接交换到对应位置上，通过前后翻转下标的二进制位 $\Theta(n)$ 实现。这样就将递归变成了迭代，常数也减小了很多。</p><h4 id="2-NTT"><a href="#2-NTT" class="headerlink" title="2. NTT"></a>2. NTT</h4><p>支持取模，可以进行模意义下的多项式乘法。<br>用原根代替单位根，减少了计算单位根和复数时不必要的常数。<br>注意在某些特定情况下取模可能造成冲突。</p><h4 id="3-多项式求逆"><a href="#3-多项式求逆" class="headerlink" title="3. 多项式求逆"></a>3. 多项式求逆</h4><p>以下推导均在模 $998244353$ 下进行。<br>给定 $n-1$ 次多项式 $F(x)$，求多项式 $G(x)$ 满足 $F(x)\cdot G(x)\equiv 1\pmod{x^n}$。<br>此时称 $G(x)$ 是 $F(x)$ 的逆，记作 $F^{-1}(x)$。</p><p>考虑倍增求解，不妨设已经求得多项式 $G_0(x)$ 满足 $F(x)\cdot G_0(x)\equiv 1\pmod{x^{\lceil\frac{n}{2}\rceil}}$<br>$G(x)$ 也同时满足 $F(x)\cdot G(x)\equiv 1\pmod{x^{\lceil\frac{n}{2}\rceil}}$。<br>所以有  </p><script type="math/tex; mode=display">\begin{aligned}F\cdot(G-G_0) &\equiv 0&\pmod{x^{\lceil\frac{n}{2}\rceil}}\\(G-G_0)^2 &\equiv 0&\pmod{x^{\lceil\frac{n}{2}\rceil}}\\F\cdot (G^2+G_0^2-2G\cdot G_0)&\equiv 0&\pmod{x^{\lceil\frac{n}{2}\rceil}}\\G-2G_0+F\cdot G_0^2&\equiv 0&\pmod{x^{\lceil\frac{n}{2}\rceil}}\\G&\equiv 2G_0-F\cdot G_0^2&\pmod{x^{\lceil\frac{n}{2}\rceil}}\\\end{aligned}</script><p>特别地，$F(x)=c$ 时，$G(x)=c^{p-2}$，其中 $p$ 是模数。</p><h4 id="4-多项式-ln"><a href="#4-多项式-ln" class="headerlink" title="4. 多项式 ln"></a>4. 多项式 ln</h4><p>$f(x)$ 对数函数的定义：<br>$\ln(1-f(x))=-\sum\limits_{i=1}^{+\infty}\dfrac{f^i(x)}{i}$<br>保证 $f(0)=1$。</p><p>给定 $n-1$ 次多项式 $F(x)$，求多项式 $G(x)$ 满足 $G(x)\equiv \ln F(x)\pmod{x^n}$。<br>两边同时求导得到 $G’\equiv(\ln F)’\pmod{x^n}$，<br>即 $G’\equiv\dfrac{F’}{F}\pmod{x^n}$。<br>再积分一下，即 $G\equiv\int\dfrac{F’}{F}\pmod{x^n}$。</p><h4 id="5-多项式-exp"><a href="#5-多项式-exp" class="headerlink" title="5. 多项式 exp"></a>5. 多项式 exp</h4><p>$f(x)$ 指数函数的定义：<br>$\exp f(x)=e^{f(x)}=\sum\limits_{i=1}^{+\infty}\dfrac{f^i(x)}{i!}$</p><p>需要用到多项式牛顿迭代，有如下递归式（$G_0(x)$ 的含义与多项式求逆一致）：<br>$G(x)\equiv G_0(x)-\dfrac{F(G_0(x))}{F’(G_0(x))}\pmod{x^n}$<br>特殊处理边界 $n=1$ 的情况。<br>推导过程暂时不会。</p><p>给定 $n-1$ 次多项式 $F(x)$，求多项式 $G(x)$ 满足 $G(x)\equiv \exp F(x)\pmod{x^n}$。保证 $F(0)=0$。</p><p>将原式化成 $\ln G(x)-F(x)\equiv 0\pmod{x^n}$ 的形式，带入牛顿迭代的表达式：  </p><script type="math/tex; mode=display">\begin{aligned}G(x)&\equiv G_0(x)-\dfrac{\ln G_0(x)-F(x)}{\frac{1}{G_0(x)}}\pmod{x^n}\\G(x)&\equiv G_0(x)(1-\ln G_0(x)+F(x))\pmod{x^n}\end{aligned}</script><p>递归边界 $G(x)\equiv 1\pmod{x^n}$。</p><h4 id="6-多项式开根"><a href="#6-多项式开根" class="headerlink" title="6. 多项式开根"></a>6. 多项式开根</h4><p>给定 $n-1$ 次多项式 $F(x)$，求多项式 $G(x)$ 满足 $G^2(x)\equiv F(x)\pmod{x^n}$。<br>将 $G^2(x)-F(x)\equiv 0\pmod{x^n}$ 代入牛顿迭代的表达式可得：<br>$G(x)=G_0(x)-\dfrac{G_0^2(x)-F(x)}{2G_0(x)}\pmod{x^n}$<br>递归边界 $G(x)=\sqrt{f(0)} \pmod{p}$，求出 $a_0$ 的二次剩余即可。</p><h4 id="7-多项式快速幂"><a href="#7-多项式快速幂" class="headerlink" title="7. 多项式快速幂"></a>7. 多项式快速幂</h4><p>给定 $n-1$ 次多项式 $F(x)$，求多项式 $G(x)$ 满足 $G(x)\equiv F^k(x)\pmod{x^n}$。保证 $F(0)=1$。  </p><p>可以由多项式定理证明 $F^k(x)\equiv F^{k\bmod p}(x)$。证明略。<br>于是容易得到 $G(x)\equiv e^{(k\bmod p)\ln F(x)}\pmod{x^n}$。</p><h4 id="8-多项式除法-取模"><a href="#8-多项式除法-取模" class="headerlink" title="8. 多项式除法/取模"></a>8. 多项式除法/取模</h4><p>给定 $n-1$ 次多项式 $F(x),G(x)$，求 $Q(x),R(x)$ 满足 $F(x)=Q(x)G(x)+R(x)$。<br>定义一个多项式 $F(x)$ 的系数数组翻转后形成的新多项式为 $F_R(x)$，即形式化地，$F_R(x)=\sum\limits_{i=0}^{n-1}a_{n-i+1}x^i$。  </p><p>推导过程如下：  </p><script type="math/tex; mode=display">\begin{aligned}F(\dfrac{1}{x})&=Q(\dfrac{1}{x})G(\dfrac{1}{x})+R(\dfrac{1}{x})\\x^{n-1}F(\dfrac{1}{x})&=x^{n-m}Q(\dfrac{1}{x})\cdot x^{m-1}G(\dfrac{1}{x})+x^{n-m+1}\cdot x^{m-2}R(\dfrac{1}{x})\\F_R(x)&=Q_R(x)G_R(x)+x^{n-m+1}R_R(x)\\F_R(x)&\equiv Q_R(x)G_R(x)\pmod{x^{n-m+1}}\\Q_R(x)&\equiv\dfrac{F_R(x)}{G_R(x)}\pmod{x^{n-m+1}}\end{aligned}</script><p>求出 $Q(x)$ 后有 $R(x)=F(x)-Q(x)G(x)$。</p><h4 id="9-常系数齐次线性递推"><a href="#9-常系数齐次线性递推" class="headerlink" title="9. 常系数齐次线性递推"></a>9. 常系数齐次线性递推</h4><p>本质上是求 $x^n \bmod G(x)$ 的结果，其中 $G(x)=x^k-p_1x^{k-1}-p_2x^{x-2}-\cdots -p_kx^0$。多项式倍增快速幂的同时对 $G(x)$ 取模即可。</p><h4 id="10-例题（见做题记录-3）"><a href="#10-例题（见做题记录-3）" class="headerlink" title="10. 例题（见做题记录 3）"></a>10. 例题（见做题记录 3）</h4><p>部分题目包含了生成函数的内容。<br>P4389 付公主的背包<br>P3338 [ZJOI2014] 力<br>P4841 [集训队作业2013] 城市规划<br>CF528D Fuzzy Search<br>CF438E The Child and Binary Tree<br>P4173 残缺的字符串  </p><h4 id="11-多项式模板（持续更新-卡常）"><a href="#11-多项式模板（持续更新-卡常）" class="headerlink" title="11. 多项式模板（持续更新/卡常）"></a>11. 多项式模板（持续更新/卡常）</h4><p><a href="https://www.luogu.com.cn/paste/gcvlb32s">Code</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP 2021 游记</title>
      <link href="/noip-2021-%E6%B8%B8%E8%AE%B0/"/>
      <url>/noip-2021-%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>但热闹是它们的，我什么也没有。 ——朱自清《荷塘月色》</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自己终究还是没有足够的实力去在大赛中发挥到最好，无论在心态上、考试策略上、大赛经验上还是硬实力上，大概都还没有到自己想要的程度吧。<br>因为疫情，没有能去燕山大学考试，HE 在 sjzez 和衡水设了分赛场，在本校考的试。</p><h3 id="Day-24"><a href="#Day-24" class="headerlink" title="Day -24"></a>Day -24</h3><p>正式决定停课，写好了请假条，把班里的东西都放回了家。</p><h3 id="Day-23-Day-3"><a href="#Day-23-Day-3" class="headerlink" title="Day -23 ~ Day -3"></a>Day -23 ~ Day -3</h3><p>在各种模拟赛中被吊打，没有比赛的时候做教练留的题单或者高二学长讲的题。<br>模拟赛最高挂分纪录：$160$</p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day -2"></a>Day -2</h3><p>VP 了一场 Global Round，结果 A~E 难度 1900-，F~H 难度 3200+。</p><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h3><p>全真模拟，题目放反了顺序。看大家分太低遂拆开 Subtask，<code>puts(&quot;NO&quot;)</code> 怒拿 $66$ pts。<br>感觉机房的气氛跟当时中考前两天没什么区别。</p><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>甚至不知道该颓废什么了，遂决定学习模拟退火，想着万一考试能用上呢。  </p><h3 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>$7:45$ 进场，$8:00$ 到座位上罚坐，试图缓解自己紧张的情绪。<br>$8:25$ 打开了虚拟机。<br>$8:30$ 开题，写了缺省源，把前三个题看了一遍。第四题看着太长，于是先丢掉不管。<br>$8:40$ 开始写 T1，一开始没有想到筛法，只想着用各种奇怪的特判解决掉大样例的一些情况，发现效果也不甚理想。<br>$9:50$ 踢掉了键盘的线，让监考老师帮忙修好。<br>$10:15$ 先写下了 $70$ pts 的暴力，弃掉 T1，开始看 T2。<br>$11:00$ T2 感觉完全不可做（考场上），看 T3 发现做过将 $a_{i+1}+a_{i-1}-a_i$ 转化为差分数组的题，开始仔细想 T3。<br>$11:50$ 期间码了 $24$ pts 的暴力，又发现差分数组的单谷性，于是又写了 $48$ pts 的暴力，剩下的拿模拟退火写了一种很不优秀的随机化做法（其实普通的随机化，每次随机放左或右就可以得到 $80+$ 的成绩，但考场上没有想到）。<br>$12:10$ 发现 T1 可以直接筛，随便写写过了大样例，拍了 T1 和 T3 的两个暴力。<br>$12:20$ 读了 T4，断定不可做，开始写 T2 暴力。<br>$12:54$ T2 暴力写挂了，遂放弃 T2，检查文件。<br>$12:58$ 发现自己 T3 输入文件写的 <code>variance3.in</code>，赶紧改过来。<br>$13:00$ 考试结束。<br>$13:10$ 等待收代码的时候电脑莫名其妙重启了，吓个半死。  </p><p>考完直接回家等民间数据，补文化课，颓废。<br>各大 OJ 上测的不是 $148$ 就是 $152$，但 HE 的分数线大概要 $160$ 左右吧。</p><h3 id="Day-2-6"><a href="#Day-2-6" class="headerlink" title="Day 2~6"></a>Day 2~6</h3><p>在家补了几天文化课，周四回班里又卷了一天。<br>期间某一天用 $5$ min 听了 T2 的思路又用 $30$ min 写完过了，感觉自己考场上降智的有点离谱。</p><h3 id="Day-7"><a href="#Day-7" class="headerlink" title="Day 7"></a>Day 7</h3><p>回到机房，开始省选内容的学习。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最终得分：$100+0+52+0=152$<br>又一次败在了 dp 上。<br>现在开始了省选知识的学习，虽然心里清楚今年省选自己希望不大，但是还是很高兴可以有机会接触更高级的知识和算法内容。希望自己以 NOIP 为诫的同时也将这次比赛视作一个契机，一块通向 OI 更高峰的垫脚石。<br>要踏实、努力，积极思考。  </p><p>Upd: $152$ pts 在 HE 只有 Rk $48$，卡线 2=。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Records 2</title>
      <link href="/records-2/"/>
      <url>/records-2/</url>
      
        <content type="html"><![CDATA[<p>以下记录了 NOIP 2021 前做题中的思路/关键点。<br>题号后 (x/y) 代表个人认为该题的思维难度/代码难度。</p><ol><li><p>CF402E Strictly Positive Matrix (4/1)  </p><ul><li>题目中询问是否含有 $0$，所以可以将所有 $a_{i,j} \neq 0$ 设为 $1$。  </li><li>转化后是邻接矩阵的形式，$a_{i,j} = 1$ 代表 $i$ 向 $j$ 连边。设邻接矩阵为 $G$，则 $G^k_{i,j}$ 代表 $i$ 到 $j$ 之间是否有长度为 $k$ 的路径。  </li><li>题目中保证至少存在一个自环，则说明我们可以选取一个很大的 $k$，利用自环满足上述关于 $G^k_{i,j}$ 的要求。</li><li>至此，题目转化为了邻接矩阵 $G$ 代表的图中所有点是否属于一个强连通分量，tarjan 缩点即可。  </li></ul></li><li><p>CF427C Checkposts (1/2)  </p><ul><li>缩点后统计每个强连通分量中最小值及其出现次数即可。  </li></ul></li><li><p>CF981D Bookshelves (3/1)  </p><ul><li>贪心地考虑，高位选 $1$ 肯定比低位都选 $1$ 要更优，所以从高位向低位进行 dp。</li><li>我们希望验证当前枚举到的 $x$ 是否能够作为答案，设 $f_{i,j}$ 为前 $i$ 本书放在 $j$ 个书架上能否组成 $x$，转移为 $f_{i,j} |=f_{k,j-1} \&amp; [(\sum\limits_{p=k+1}^{i}\&amp; x)=x]$。  </li></ul></li><li><p>P4377 [USACO18OPEN] Talent Show G (3/2)  </p><ul><li>如果题目没有最小重量为 $W$ 的限制，那么直接贪心，通过 01 分数规划按照 $a_i-b_ix$ 排序。<ul><li>考虑对于限制进行 01 背包，把所有总质量 $\ge W$ 的更新全算在 $f_W$ 上。  </li></ul></li></ul></li><li><p>P3031 [USACO11NOV] Above the Median G (2/1)  </p><ul><li>套路题，将 $\ge x$ 的数设为 $1$，$&lt;x$ 的数设为 $-1$，计算前缀和逆序对数即可。  </li></ul></li><li><p>P3008 [USACO11JAN] Roads and Planes G (2/2)  </p><ul><li>spfa 会被卡，考虑用 dijkstra。注意到双向边没有负边权，缩点后单向边是 DAG。强连通分量内部用 Dijkstra，强连通分量之间拓扑排序即可。  </li><li>注意有负边权，询问是否连通时需要询问一个略小于初始设定的 <code>INF</code> 的数。</li></ul></li><li><p>P7677 [COCI2013-2014#5] LADICE (2/1)  </p><ul><li>（可以二分图匹配，但没有必要）。</li><li>并查集维护对于每个联通块，如果边数大于点数则新加入的边不合法，否则合法。  </li></ul></li><li><p>P4443 [COCI2017-2018#3] Dojave (4/2)  </p><ul><li>正难则反，考虑有多少个序列不合法。  </li><li>通过一系列讨论发现：一段连续子序列不合法的充要条件是这段连续子序列的长度是 $4$ 的倍数并且连续子序列里面的数两两配对的异或值为 $2^n-1$。</li><li>一段长为 $4$ 倍数的区间异或和为 $0$ 是这个区间两两配对的必要条件。我们将配对的一组数赋成同一个较大的随机数（Hash 的思想），如果区间异或和仍为 $0$ 则可以认为该区间满足条件。</li><li>单哈希会被卡，用双哈希。  </li></ul></li><li><p>CF340D Bubble Sort Graph (2/1)  </p><ul><li>题目可以理解为给出一个长度为 $n$ 的序列，每个逆序对连一条无向边，求得到的无向图（可能不连通）的最大独立集。  </li><li>不难发现没有连边的点肯定不是逆序的（因此是递增的），所以将原题转化为了 $\Theta(n \log n)$ LIS 裸题。  </li></ul></li><li><p>CF617E XOR and Favorite Number (2/3)   </p><ul><li>处理前缀异或和，将问题转化为求 $[l,r]$ 中有多少对 $(i,j)$ 满足 $a_i  \text{xor} a_j=k$。  </li><li>静态区间离线查询，考虑使用莫队算法解决。  </li></ul></li><li><p>CF161D Distance in Tree (3/1)  </p><ul><li><del>（点分治模板题，可惜我不会）</del>  </li><li>一题多解，树形 dp，树上启发式合并，长链剖分，点分治均可以做。</li><li>发现 $k$ 很小，考虑使用 $\Theta(nk)$ 的树形 dp 解决。设 $f_{i,j}$ 为以 $i$ 为根的子树中距离根距离为 $j$ 的点有多少个，回溯时向上暴力统计答案即可。  </li></ul></li><li><p>CF980E The Number Games (2/2)  </p><ul><li>贪心，选 $n$ 号城市一定比选 $[1,n-1]$ 的所有城市要优。将 $n$ 号节点定为树根，按编号从大到小枚举节点，如果该节点到根的路径上没有选的点数小于等于剩下还能选的点数，则将整条路径选中。  </li><li>树剖 + 线段树实现，线段树支持区间赋值为 $1$，区间求和。  </li></ul></li><li><p>CF1101F Trucks and Cities (4/2)  </p><ul><li>发现题目可以抽象成序列上的区间问题，考虑区间 dp。设 $f_{i,j,k}$ 为从 $i$ 到 $j$ 划分成 $k$ 段后最长段的最小值。暴力转移可以考虑枚举最右段的左端点 $l$，则有 $f_{i,j,k}=\min\limits_{l=i}^{j}\{\max\{f_{i,l,k-1},a_j-a_l\}\}$，复杂度 $\Theta(n^4+m)$。  </li><li>可以发现 $f_{i,l,k-1}$ 单调递增，$a_j-a_l$ 单调递减，用指针单调地更新 $l$ 的值，每次转移就变成了在 $l-1$ 和 $l$ 中决策，复杂度降至 $\Theta(n^3+m)$。  </li></ul></li><li><p>CF1408E Avoid Rainbow Cycles (3/1)  </p><ul><li>重构一张图，将集合看作一个点，向所有集合内的元素连边，不难发现如果新图中有环则在原图上不合法。在新图上求最大生成树，删除其余的边即可。  </li></ul></li><li><p>CF274E Mirror Room (4/3)  </p><ul><li>见<a href="https://www.luogu.com.cn/blog/Awesome519/solution-cf274e">题解</a>。  </li></ul></li><li><p>P2737 [USACO4.1] 麦香牛块 Beef McNuggets (3/1)  </p><ul><li>关于上界的证明见 __rqy 的证明： <a href="https://www.luogu.com.cn/blog/rqy/solution-p2737">https://www.luogu.com.cn/blog/rqy/solution-p2737</a>  </li><li>确定枚举的上界后，背包考虑每个元素是否能被凑出。具体地，如果 $k$ 能被凑出，则 $k+a_i$ 也能被凑出。</li></ul></li><li><p>P4269 [USACO18FEB] Snow Boots G (3/2)  </p><ul><li>考虑将地板和靴子放在一起排序，如果是地板就线段树上单点修改为 $0$，是靴子就查找全局最长的连续的 $1$ 的个数即可，具体做法为 <a href="https://www.luogu.com.cn/problem/P2572">P2572 [SCOI2010] 序列操作</a> 的弱化版。  </li></ul></li><li><p>CF1101G (Zero XOR Subset)-less (4/1)  </p><ul><li>首先需要先知道什么是线性基及其性质。（见 OI-Wiki）</li><li>首先套路地用前缀和将 $[l,r]$ 的异或和转化为 $pre_{l-1} \text{xor} pre_r$。 有下面的结论：把 $pre_i$ 依次插入线性基，如果能成功插入答案加 $1$。</li><li>设 $b_1,b_2,\cdots,b_m$ 为成功插入线性基的下标，对于任意 $(b_i,b_j)$ 的异或值均不为 $0$，而这恰好是 $pre$ 中某一段的异或和，因此任意段异或和不为 $0$。  </li></ul></li><li><p>P3041 [USACO12JAN] Video Game G (2/2)  </p><ul><li>AC 自动机上 dp，套路地有 $f_{i,j}$ 为当前考虑到第 $i$ 位，在 trie 树上走到 $j$ 号节点时的最大得分。记每个单词结尾点 $i$ 有分值为 $ed_i$，则对于每个节点更新 fail 时要直接加上其 fail 的分值。转移方程 $f_{i,tr_{j,son}}=\max\{f_{i-1,j}+ed_{tr_{j,son}}\}$。  </li></ul></li><li><p>CF343C Read Time (2/2)  </p><ul><li>显然时间越长，每个点能移动的距离越大，覆盖的范围也越远。因此答案具有单调性，考虑二分答案。</li><li>贪心地考虑覆盖一段，并维护当前点的左右指针。当右指针指向 $m+1$ 说明整个区间均被覆盖，当前答案合法。  </li></ul></li><li><p>P3119 [USACO15JAN] Grass Cownoisseur G (3/3)  </p><ul><li>考虑缩点时统计强连通分量的大小，记为新点的点权。</li><li>缩点后对新图正反方向连边，跑最长路后枚举需要反向的边，统计答案。  </li></ul></li><li><p>P7914 [CSP-S 2021] 括号序列 (5/3)  </p><ul><li>为防止循环变量混淆，将题目中关于连续 <code>*</code> 的限制设为 $m$。定义 A、B 为合法的超级括号串，S 为题目中所述的连续不超过 $m$ 个的 <code>*</code>。</li><li>区间 dp，考虑设 $f_{i,j}$ 为 $[i,j]$ 中形如 (A)、(AS)、(SA) 的超级括号串个数，即满足 $i,j$ 位置上的括号匹配的合法超级串个数；设 $g_{i,j,0}$ 为 $i,j$ 区间内形如 AB、ASB 的超级括号串个数，即 $i,j$ 位置上分别是左右括号，但不匹配；设 $g_{i,j,1}$ 为 $[i,j]$ 区间内形如 AS 的串的个数，即一个合法超级括号串右边加 $(0,\min\{m,j-i-1\}]$ 个 <code>*</code> 能组成的串的个数（相当于一个后缀和，将 $\Theta(n^4)$ 的 dp 优化成 $\Theta(n^3)$）。  </li><li>转移方程：  <ul><li>$f_{i,j}=g_{i+1,j-1,0}+g_{i+1,j-1,1}+\sum\limits_{k=1}^{\min\{m,j-i-1\}}g_{i+k+1,j-1,0}$  </li><li>$g_{i,j,0}=f_{i,j}+\sum\limits_{k=i+1}^{j-2}(g_{i,k,0}+g_{i,k,1})\times f_{k+1,j}$  </li><li>$g_{i,j,1}=\sum\limits_{k=1}^{\min\{m,j-i\}}g_{i,j-k,0}$  </li></ul></li><li>转移顺序：$g_{i,j,1}\rightarrow f_{i,j}\rightarrow g_{i,j,0}$，转移 $f_{i,j}$ 前需要判断 $[i,j]$ 是否合法（即 $i,j$ 位置上分别为左括号和右括号，可以用 <code>?</code> 代替），转移连续的 <code>*</code> 时遇到括号则 <code>break</code>。  </li></ul></li><li><p>CF242E XOR on Segment (2/2)  </p><ul><li>发现异或和区间加不方便同时在线段树上维护，所以考虑拆位，异或操作则为按位取反，区间求和时将第 $i$ 位 $1$ 的个数乘以 $2^i$ 即可。  </li></ul></li><li><p>CF803G Periodic RMQ Problem (3/4)  </p><ul><li>动态开点保证了空间，询问最小值的时候用 ST 表维护。若区间被覆盖过则为覆盖的值，否则分三类讨论：$[l,r]$ 包含了至少一个区间长度，不到一个区间长度且被一个完整区间包含，不到一个区间长度且跨过两个区间。  </li><li>下标整体左移方便处理边界。  </li></ul></li><li><p>P3605 [USACO17JAN] Promotion Counting P (2/1)  </p><ul><li>树状数组 + dfs，离散化后在树上对于每个点询问前 $ans_x$ 先减去已经比 $x$ 大的数的个数，搜完 $x$ 的子树后再加上新的差值，即 $x$ 子树中比 $x$ 大的数的个数。  </li></ul></li><li><p>P2943 [USACO09MAR] Cleaning Up G (3/1)  </p><ul><li>令人耳目一新的思维好题。</li><li>发现从当前位置往前跳，最多跳 $\sqrt{n}$ 个不同的数字，否则肯定不优。利用这个性质可以将 dp 优化到 $\Theta(n\sqrt{n})$。  </li></ul></li><li><p>P4375 [USACO18OPEN] Out of Sorts G (3/1)  </p><ul><li>将序列离散化，发现每次双向冒泡排序的时候，若一个位置 $x$ 前的数没有排好序，则每次双向冒泡排序是将一个大于位置 $x$ 的数换出去，再将一个小于位置 $x$ 的数换回来，即答案为 $\max\{$位置$ x$ 之前有多少个数大于 $x\}$。  </li></ul></li><li><p>CF620E New Year Tree (2/3) </p><ul><li>将树上问题通过 dfn 序映射到序列上，线段树维护。注意到颜色种类很少，状压后可以存在 long long 范围中。  </li></ul></li><li><p>P1941 [NOIP2014 提高组] 飞扬的小鸟 (2/3)  </p><ul><li>又是一道咕了不知道多久的经典题。</li><li>背包的 dp 思路很显然，上升时完全背包，下降时 01 背包。题目中有非常多需要仔细处理的细节，比如管道真正的边界在哪里，上界超过 $m$ 的转移到 $m$（开大数组！），不能通过是输出答案的边界判断等等。  </li></ul></li><li><p>CF343D Water Tree (1/2)  </p><ul><li>又水了一道树剖的板子。  </li></ul></li><li><p>CF1100E Andrew and Taxi (3/3)  </p><ul><li>考虑二分答案，每次只对于删不掉的边考虑是否有环。如果没有环则答案合法。找到答案后，将所有拓扑序逆序的边反向即可。  </li></ul></li><li><p>CF1131F Asya And Kittens (2/1)  </p><ul><li>注意到合并两个块的时候，块内顺序是不可以改变的，所以 vector 暴力合并即可。（把小的 vector 暴力 push 到大的上）  </li></ul></li><li><p>CF711D Directed Roads (1/2)  </p><ul><li>不难发现题目中给定了一个基环森林，对于每个环上的边只要不朝向同一方向即可。所有不在环上的边方向任取。  </li></ul></li><li><p>CF85E Guard Towers (3/2)    </p><ul><li>最大值最小，可以想到二分答案；分成两部分，可以想到二分图。二分距离最大的两点的距离最小值，将大于 mid 的点之间连边，dfs 染色（不用真存边，dfs 染色遍历即可）。如果能够黑白染色，说明取当前 mid 合法。</li><li>设联通块的个数为 $cnt$，则总方案数为 $2^{cnt}$，因为二分图中任意一个联通块的左部点和右部点均可互换。  </li></ul></li><li><p>CF632F Magic Matrix (3/1，指暴力)  </p><ul><li>正解是神仙建图跑最小生成树，复杂度 $\Theta(n^2\log n^2)$。  </li><li>但发现 $n\leq 2500$ 且时限 5s，$\Theta(\frac{n^3}{\omega})$ 可以卡过。暴力的思想就是对于每个点的数值从小到大排序加入矩阵，每次加入时查找第 $i$ 行和第 $j$ 行的第 $k$ 位是否都小于 $a_{i,j}$，如果是则不合法。用 bitset 维护上述操作，因为从小到大加入数字，所以已经加入的在 bitset 中赋为 $1$，查找时只需要查找 $i,j$ 位置上是否至少有一个 $0$ 即可。  </li></ul></li><li><p>CF476D Dreamoon and Sets (3/1)  </p><ul><li>贴一个题解的分析： </li></ul><p><img src="/records-2/Sol1.png" alt>  </p></li><li><p>CF40E Number Table (4/1)  </p><ul><li>思维好题。发现 $k&lt;\max\{n,m\}$ 这个条件很特殊，它保证了无论如何填数都有一个空行和一个空列。</li><li>不妨设 $n&gt;m$。所有列都可以通过空行满足要求，对于每行也利用空出的列满足要求。如果有某一行或某一列已经填满且乘积为 $1$ 则必然无解，行列个数的奇偶性不同也会导致空行空列的交点处无法满足条件，因此也无解。如果有解，且某一行没有填满，则除了需要留下一个格子空着不填，剩余的格子随意。因此答案为 $\prod\limits_{i=1}^{n} 2^{m-cnt_i-1}$。  </li></ul></li><li><p>CF17E Palisection (4/2)  </p><ul><li>正难则反，考虑用总的方案数减去不相交的方案数。设 $f_i$ 为以 $i$ 为右端点的回文串个数，$g_i$ 为以 $i$ 为左端点的回文串个数，则答案为 $\sum\limits_{i=1}^{n}f_i\sum\limits_{j=1}^{i-1}g_i$。  </li><li>用 manacher 求出所有位置的回文半径，发现本质上就是区间加 $1$，前缀和 + 差分即可。复杂度 $\Theta(n)$。  </li></ul></li><li><p>CF949C Data Center Maintenance (3/2)  </p><ul><li>阅读理解题。读懂题意后发现题目让求必须选一个点推迟的情况下需要推迟的最小点数。tarjan 缩点后贪心地考虑所有 DAG 上出度为 $0$ 的点，取最小的即为答案。  </li></ul></li><li><p>P2938 [USACO09FEB] Stock Market G (2/1)  </p><ul><li>怎么普及组难度的 dp 都要调好久啊……</li><li>本题的转化在于股票的买卖，因为一天内可以无限次买入卖出，所以 $x$ 天前购买的股票可以看作在第 $x+1$ 天又买入后卖出，以此类推。完全背包即可。  </li></ul></li><li><p>CF1110C Meaningless Operations (2/1) </p></li><li><p>P4878 [USACO05DEC] Layout G (1/2) </p></li><li><p>CF540C Ice Cave (1/1) </p></li><li><p>1103 模拟赛 - planning (4/1)  </p><ul><li>题意是说有 $n$ 栋楼房高度为 $h_i$，现在操作 $k$ 次，每次可以改变任意一栋楼房的高度，使相邻两楼房之间的高度差最大值最小。形式化地，可以进行 $k$ 次操作使 $h_i=b$，最小化 $\max\limits_{i=2}^{n}\{h_i-h_{i-1}\}$。$1\le k\le n\le 2000$。  </li><li>二分答案 + dp。dp 时设 $f_i$ 为对于前 $i$ 栋楼房，在不修改第 $i$ 栋的前提下满足当前二分值的最小修改次数。转移时如果对于 $1 \leq j &lt; i$， $|h_i-h_j|$ 不超过二分值的 $i-j$ 倍则可以在 $f_j$ 基础上修改 $i-j-1$ 栋楼房达到目的。统计答案时如果满足 $\exists i\in[1,n],f_i+(n-i) \leq x$ 即合法。  </li></ul></li><li><p>1103 模拟赛 - garland (5/2)  </p><ul><li>题意是要求求出环形最大 $m$ 段和。$1\le m\le 10^5,1\le n\le 3\times 10^5$。  </li><li>首先对于每一段连续的值为正或值为负的数字，如果选则选完一整段。将原序列缩成一个正负相间的环，考虑 $m$ 次是否能选完所有正的区间，如果不能则需要做出牺牲。  </li><li>我们需要放弃一些值为正的区间或选上一些值为负的区间来连接两个正区间。一个思路是按照区间价值的绝对值贪心，但这个贪心策略有一定的问题：如果想要选择两个负区间来连接三个正区间，但此时中间的正区间却已经被删除，那我们就失去了这种选择。所以考虑反悔贪心，选择一个区间时，可以将其左右区间删除并将连续的三个区间之和插入原位置，如果这个位置再次被选到则说明贪心需要反悔。用堆和双向链表维护，时间复杂度 $\Theta(n\log n)$。  </li></ul></li><li><p>1103 模拟赛 - cipher (3/3)  </p><ul><li>题意是给定一个长度为 $n$ 操作序列形如 <code>XOR a</code>，<code>AND b</code>，<code>OR c</code>，再有 $m$ 次操作每次询问一个数经过整个操作序列后的结果，或者修改操作序列的某一个数。$n,m\le 2\times 10^5$。  </li><li>显然要按位处理，用线段树维护。对于每个节点 $t_{0/1,i,p}$ 表示第 $i$ 位经过左端点前的 $0/1$ 经过 $p$ 节点所代表的区间得到的结果，这样就有了结合律，可以区间维护。  </li></ul></li><li><p>CF1348B Phoenix and Beauty (2/1)  </p><ul><li>发现最终序列长度的限制很宽松，达到了 $n^2$ 级别，所以直接考虑构造一个长度为 $k$ 且包含原序列中所有元素的序列 $b$，将其复制 $n$ 遍得解。注意如果原序列中数字的种类大于 $k$ 则无解。</li></ul></li><li><p>CF1312E Array Shrinking (2/2)  </p><ul><li>经典 dp 题，考虑首先区间 dp 计算出每个区间能缩成的值，如果一个区间不能缩成一个数则为 $0$，复杂度 $\Theta(n^3)$。再考虑统计答案，枚举当前位置和其之前的一个位置，如果组成的区间可以合并成一个数则转移，复杂度 $\Theta(n^2)$。</li></ul></li><li><p>CF1110E Magic Stones (3/1)</p><ul><li>如果边界不相等一定无解。</li><li>设 $d$ 为差分序列，即 $d_i=c_i-c_{i-1}$。每次操作我们改变 $c_i$ 的同时，$d_i$ 会发生如下改变：$d_i=(c_{i+1}+c{i-1}-c_i)-c_{i-1}=c_{i+1}-c_i, d_{i+1}=c_{i+1}-(c_{i+1}+c{i-1}-c_i)=c_i-c_{i-1}$，本质上就是差分数组的相邻元素互换。将 $c,t$ 差分，判断两个差分数组排序后是否相等即可。</li></ul></li><li><p>CF989C A Mist of Florescence (3/1)  </p><ul><li>好题。将 $50\times 50$ 的棋盘横向分成四部分，一部分一个字符充当背景。增加一个字符的连通块个数只需要在另外一个字符的背景下更改单个独立的字符即可。</li></ul></li><li><p>P4372 [USACO18OPEN] Out of Sorts P (4/2)  </p><ul><li>求每次冒泡排序操作的序列长度，就是求每个点被冒泡排序的次数。</li><li>如果序列所有点两端都有分割线，则序列是排好序的。将原序列离散化，一条分割线出现的时间就是离它最远的小于它的点冒泡到它前面的时间，可以用指针维护。</li></ul></li><li><p>P3045 [USACO12FEB] Cow Coupons G (4/2)  </p><ul><li>贪心反悔。首先一个显然错误的贪心思路是按折扣价从小到大贪心地选，但我们发现可能会出现让折扣价相对不优的获得折扣，并让一个先前被认定要折扣的物品恢复原价可能更优的情况。</li><li>先将前 $k$ 小的 $c_i$ 值放入小根堆，考虑用剩余的钱贪心地购买物品。对于后 $n-k$ 个物品中的第 $j$ 个，它的花费可能是 $p_j$（不用优惠劵）或 $p_j+c_i-c_j$。所以用三个优先队列分别维护 $c_i$，$p_i$ 和 $p_i-c_i$ 即可。</li></ul></li><li><p>CF1348D Phoenix and Science (1/2)  </p><ul><li>贪心地想可能每次让变化量增长最多是最优的。但我们需要结果恰好为 $n$，直接找到第一个比依次减去若干个二的整次幂后的剩余量小的位置插入，再差分即可。</li></ul></li><li><p>CF1304D Shortest and Longest LIS (2/1)  </p><ul><li>对于最长 LIS，构造序列 $a_i=i$，再翻转所有连续为 <code>&gt;</code> 的区间。反之同理。</li></ul></li><li><p>CF1286C1 Madhouse (Easy version) (3/2)  </p><ul><li><del>（Hard version 暂时咕了）</del>  </li><li>可以询问 $[1,n]$ 和 $[1,n-1]$，总询问的字串长度是 $n^2$ 满足 Easy version 题目的限制。询问 $[1,n]$ 会比 $[1,n-1]$ 多出 $n$ 个子串，找到这些乱序的子串（后缀）就可以恢复原串。  </li><li>找子串时用 multiset，将 $[1,n]$ 的每个子串按字母顺序排序后插入可重集，再对于 $[1,n-1]$ 的每个子串执行删除操作，最后 multiset 中便剩余了所需要的 $n$ 个后缀。</li></ul></li><li><p>CF335F Buy One, Get One Free (5/2)  </p><ul><li><a href="https://www.cnblogs.com/xixike/p/15505746.html">orz xixike</a>  </li><li>我们将价值相同的物品放在一起，记录对于每个价值共有多少个。对于每一组物品，可以通过选择更换堆顶，或保留堆顶并向堆中插入 $2\times val-k$ 的代价，代表全价购买了 $k$，但免费可以选择两个价值为当前值 $val$ 的物品。注意对于每一组物品，考虑时应将这一轮需要插入堆中的物品用数组记下，等操作完这一轮再加入堆中，以防冲突。</li></ul></li><li><p>P5017 [NOIP2018 普及组] 摆渡车 (3/1)  </p><ul><li>显然我是来填坑的。  </li><li>不需要斜率优化的做法好想好写，就没写斜率优化。考虑将时间轴分段，将每次摆渡车出发的时间视为右端点，问题便转化为将时间轴分为若干长度 $\ge m$ 的段，使每个点到其所在段的右端点距离和最小。</li><li>设 $f_i$ 代表时间为 $i$ 的最优决策，注意考虑边界，带 $\sum$ 的式子不方便直接维护所以用前缀和优化；每次只需要从 $(i-2m,i-m]$ 转移，并且在 $(i-m,i]$ 若没有点则 $f_i$ 可以直接继承 $f_{i-m}$ 的答案。时间复杂度 $\Theta(nm^2+t)$。  </li></ul></li><li><p>1105 模拟赛 - treasure (4/3)  </p></li><li><p>1105 模拟赛 - path (3/2)  </p><ul><li>出题人脚造数据，直接让最短路水过差评。  </li><li>正解是 bfs，首先将和起点连接的所有边权为 $0$ 的边缩成一个点进行 bfs，因为前导零没有贡献。然后按照顺序分组更新，对于每一层扩展按照 $0,1$ 的顺序分组更新即可。  </li></ul></li><li><p>P2986 [USACO10MAR] Great Cow Gathering G (2/2)  </p><ul><li>换根 dp 模板。先算出对于每个点，这个点的子树都聚集到它的花费，发现根节点 $1$ 的花费就是一个可行解。考虑每次换成一个子节点，改变的贡献可以 $\Theta(1)$ 求出。总复杂度 $\Theta(n)$。  </li></ul></li><li><p>P3066 [USACO12DEC] Running Away From the Barn G (2/2)  </p><ul><li>发现距离小于等于 $t$ 这个限制等价于将树上连续的一段进行区间加，可以使用树上差分。暴力向上跳 $t$ 的长度复杂度为 $\Theta(nt)$，可以倍增优化成 $\Theta(n\log t)$。  </li></ul></li><li><p>P3047 [USACO12FEB] Nearby Cows G (3/2)  </p><ul><li>树形 dp 经典题，记 $g_{i,j}$ 为 $i$ 的子树中距离 $j$ 以内的点的点权和，$f_{i,j}$ 为距离点 $i$ 在 $j$ 以内的点的点权和。$g_{i,j}$ 直接求，$f_{i,j}$ 考虑容斥，有 $f_{i,j}=g_{i,j}+f_{fa_{i},j-1}-f_{i,j-2}$。  </li></ul></li><li><p>P3660 [USACO17FEB] Why Did the Cow Cross the Road III G (3/1)  </p><ul><li>考虑按照两个字符出现的间距从大到小排序，然后依次插入树状数组中。因为从大到小排序，后加入树状数组的区间不可能同时包含先加入树状数组的区间的左右端点。按顺序修改左右端点，区间求和即可。  </li></ul></li><li><p>P3071 [USACO13JAN] Seating G (2/3)  </p><ul><li>不难想到用线段树维护。对于每个区间存储左/右/整体最长连续空区间的长度，用于区间的修改和合并。查询第一个空着的长度为 $k$ 的段，只需要通过线段树根节点判断是否合法，再直接二分查询即可。注意如果是左右子树合并起来的区间满足条件，直接返回一个确定的左边界即可。</li></ul></li><li><p>1106 模拟赛 - chess (3/1)  </p><ul><li>题意不够明确，应该是黑白棋子的个数差的绝对值对于任意段均不超过 $k$。</li><li>记忆化搜索，记 $f_{i,j,suf_i,suf_j}$ 为已经放了 $i$ 个白棋子，$j$ 个黑棋子，后缀分别有 $suf_i,suf_j$ 个棋子的方案数，搜到不合法或 $n+m$ 步返回即可。</li></ul></li><li><p>1106 模拟赛 - taxi (4/2)</p><ul><li>考试的时候没有看到只能坐 $4$ 个人。</li><li>只需记下三个人的目的地，因为第四个人上车后必有人下车。所以记下当前乘客编号、当前司机位置以及车上三个人的目的地，分情况考虑转移，大力记搜即可。</li></ul></li><li><p>1106 模拟赛 - stone (2/1)</p><ul><li>折半枚举子集后将模意义下的和排序，枚举前一半，在后一半中 lower_bound 找即可。</li></ul></li><li><p>P5322 [BJOI2019] 排兵布阵 (3/1)</p><ul><li>显然是背包，但不能对于每一组攻击都做一遍。</li><li>考虑到如果攻占下一个玩家的城堡，那么出兵更弱的玩家自然也会被攻占，所以可以将 $a$ 数组排序，得到 $f_j = \max\{f_j, f_{j - a_{i,k}} \times 2 - 1\} + k \times i$。</li></ul></li><li><p>P5337 [TJOI2019] 甲苯先生的字符串 (2/2)</p><ul><li>考虑构造一个 $26\times 26$ 的矩阵，原串里如果 $i,j$ 相邻则 $A_{i,j}=0$，否则 $A_{i,j}=1$。答案为 $A^{n-1}$。</li></ul></li><li><p>P5319 [BJOI2019] 奥术神杖</p><ul><li>Placeholder</li></ul></li><li><p>CF464E The Classic Problem</p><ul><li>Placeholder</li></ul></li><li><p>P2900 [USACO08MAR] Land Acquisition G</p><ul><li>Placeholder</li></ul></li><li><p>P3195 [HNOI2008] 玩具装箱</p><ul><li>Placeholder</li></ul></li><li><p>CF240F TorCoder (3/3)</p><ul><li>对于每个区间修改，直接统计字符出现个数后判断奇偶，从 a 到 z 重构。对于字符集中的每个字符开一个线段树，代表这个区间内有多少个该字符。</li></ul></li><li><p>CF383C Propagating tree (3/2)</p><ul><li>转化比较巧妙。直接将所有深度奇偶不同的点下传的正负不同（包括 update 和下传标记），这样保证了懒标记可以用线段树维护。</li></ul></li><li><p>P4114 Qtree1 (1/3)</p><ul><li>树剖点权转边权模板，注意转化时的映射，以及题目中修改要求修改一条边的边权。</li></ul></li><li><p>1108 模拟赛 - 1 等差数列 (1/2)</p><ul><li>从左右边界暴力跳到第一个同时存在于两个等差数列中的数，再 $\Theta(1)$ 求即可。注意边界和细节。</li></ul></li><li><p>1108 模拟赛 - 2 玩具 (1/2)</p><ul><li>发现如果上半身无法走动时下半身占满了区间内所有的 $1$ 则无解。考虑用指针模拟整个运动过程，即将下半身移动到当前能到的最右端，再移动上半身到最右端，直到移动到整个区间的最右端。时间复杂度 $\Theta(n)$。</li></ul></li><li><p>1108 模拟赛 - 3 整除 (3/2)</p><ul><li>全场就我不会的水题。手写队列广搜，第一次搜到余数等于 $0$ 一定就是答案，输出事先记录下的前缀即可。</li></ul></li><li><p>1108 模拟赛 - 4 集合 (3/3)</p><ul><li>并查集按秩合并，即按照时间，将整个并查集结构重组成树形结构，每次向上找父亲的复杂度为 $\Theta(\log n)$。</li><li>考虑每次询问时先找到该节点最晚的覆盖标记，再维护将最后一个覆盖标记之后的加法操作。由于是按秩合并，暴力向上跳的复杂度是正确的。</li></ul></li><li><p>CF149D Coloring Brackets (2/3)  </p><ul><li>区间 dp，显然设 $f_{l,r,i,j}$ 为对于 $[l,r]$ 这段区间左侧的括号颜色为 $i$，右侧为 $j$ 时的方案数。发现直接转移不太方便写，可以考虑使用记忆化搜索，每次只搜索合法的区间。</li></ul></li><li><p>CF708C Centroids (4/2)  </p><ul><li>树形 dp，可以先找出原树的重心，以重心为根，发现对于任意一个子节点作为根时若不满足重心的性质，一定是它父亲节点所在的子树大小超过了限制。由此可以将问题转化为求 $g_u$ 代表除子树 $u$ 外最大不超过 $\lfloor\frac{n}{2}\rfloor$ 的子树大小。最后统计答案是对于每一个点，如果它是重心或满足 $n-siz_u-g_u\le\lfloor\frac{n}{2}\rfloor$ 的条件则可以通过一次修改操作使它成为重心。</li><li>考虑换根求 $g$，因为从 $u$ 转移到 $v$ 时可能 $v$ 已经是最大值，所以要记录最大值和次大值进行转移。  </li></ul></li><li><p>P5631 最小mex生成树 (4/2)</p><ul><li>有一个科技叫做可撤销并查集。即启发式合并后可以反悔操作的并查集。</li><li>暴力的思路是从小到大枚举边权，判断删去这个边权后图是否联通，复杂度 $\Theta(mw\log m)$。考虑分治，分别考虑值域在 $[l,mid]$ 和 $[mid+1,r]$ 的边被删掉时图的连通性，分治后用可撤销并查集撤销操作。</li></ul></li><li><p>P4099 [HEOI2013] SAO (5/3)  </p><ul><li>题意是要求出一个树形图的不同的拓扑序个数。</li><li>发现将原问题考虑成树形图将不好处理，所以直接在树上考虑树形 dp，对两种方向分别转移。设 $f_{u,i}$ 为在当前加进 $u$ 的子树中 $u$ 在子树的拓扑序排名为 $i$。</li><li>将子树 $v$ 连到子树 $u$ 上，考虑两种情况：$u,v$ 之间的连边方向 $v$ 连向 $u$ 还是 $u$ 连向 $v$。贴张题解的分析：<img src="/records-2/Sol2.png" alt></li><li>最后将与 $p$ 有关的项提出来，将 $f_{v,q}$ 前缀和优化一下，可以做到 $\Theta(n^2)$。</li></ul></li><li><p>P2023 [AHOI2009] 维护序列 (1/2)</p><ul><li>复习了线段树同时维护乘法和加法时的优先级。</li></ul></li><li><p>P2324 [SCOI2005] 骑士精神 (2/2)</p><ul><li>IDA*（还是 A*，不太清楚），估价函数为有多少个棋子不在目标位置上。超过 $15$ 步则直接输出 -1。</li></ul></li><li><p>P4133 [BJOI2012] 最多的方案</p><ul><li>Placeholder</li></ul></li><li><p>1110 模拟赛 - 1 图 (2/1)</p><ul><li>非常直接的思路。考虑 bfs 过程中将 $s$ 到 $t$ 的最短路上每条边均染成不同的颜色，这样一定是最优的。bfs 过程中注意到 $t$ 了一定要直接 return，且尽可能少地留下不染色的边。</li></ul></li><li><p>1110 模拟赛 - 2 幂 (3/1, 80pts)</p><ul><li>100pts 的解法需要生成函数的知识，暂时咕着，NOIP 回来之后再补。</li><li>80pts 可以将 $x$ 和括号分别考虑，发现就是一个组合数和卡特兰数的乘积求和，$\Theta(n^2)$ 预处理一下有 60pts，对于单点单独计算就可以达到 80pts 了。</li></ul></li><li><p>1110 模拟赛 - 3 异或 (4/2)</p><ul><li>排序不影响最后的结果，而且排完序后的序列有如下性质：$\forall 1\le a&lt;b&lt;c\le n,\min\{a  \text{xor} b, b \text{xor} c\}\le a \text{xor} c$。证明可以按位分类讨论。根据上述性质容易想到 $\Theta(n^2)$ 的暴力 dp 转移。</li><li>用 01-trie 优化这个过程。考虑在 01-trie 上查询每个元素对前边元素的贡献时，可以跳右子树（1）或跳左子树（0）的同时保留右子树的贡献，复杂度便优化到了 $\Theta(n\log x)$。</li></ul></li><li><p>P4295 [SCOI2003] 严格N元树 (3/1)</p><ul><li>神奇的 dp 题。设 $f_i$ 为深度为 $i$ 的严格N元树的个数，则从上一层转移可以看作向上一层连接到了一个有 $n$ 个节点的根上，有转移方程 $f_i=f_{i-1}^n+1$。</li></ul></li><li><p>P4035 [JSOI2008] 球形空间产生器 (3/1)</p><ul><li>高斯消元，需要一步转化：设球心坐标为 $(x_1,x_2,\cdots,x_n)$， 发现每个式子都可以写成形如 $\sum\limits_{j=0}^{n}(a_{i,j}-x_j)^2=c$ 的形式，其中 $c$ 是常数。将相邻的两个式子相减可以消去 $c$，整理后变成了可以高斯消元的形式。</li></ul></li><li><p>P2607 [ZJOI2008] 骑士 (3/2)</p><ul><li>很妙的思路，值得借鉴。题目中给定了一个基环森林，对于每个连通块，考虑将环断开一条边，钦定这条边连接的两点必须只能选一个。然后再对删完边的树跑两遍形如“没有上司的舞会”的树形 dp 即可。</li></ul></li><li><p>P3523 [POI2011] DYN-Dynamite (4/2)</p><ul><li>题目要求最大值最小，显然考虑二分答案。考虑树形 dp，从叶子向根处理，设 $f_u$ 为距 $u$ 最远的未被覆盖的关键点的距离，若没有则为 $-\infty$；设 $g_u$ 为 $u$ 到其子树下被选定节点的最小距离，若没有则为 $+\infty$。转移方程 $f_u=\max\{f_v+1\},g_u=\max\{g_v+1\}$。</li><li>统计完子树贡献后分类考虑当前节点的贡献。若 $f_u+g_u\le mid$，则说明只用已选定节点中到 $x$ 距离最小的点就能够覆盖到最远的关键节点，此时整个子树已被覆盖，$f_u=-\infty$；若 $f_u=mid$，说明 $u$ 必须被选，此时将选点的个数加一；若 $g_u&gt;mid$ 且 $d_u=1$ 则说明这个节点无法被其子节点覆盖，需要到父亲节点处解决，有 $f_u=\max\{f_u,0\}$。最后判断选择节点的个数和 $m$ 的关系进行二分答案即可。  </li></ul></li><li><p>P3174 [HAOI2009] 毛毛虫 (3/2)  </p><ul><li>树形 dp，设 $f_u$ 为在 $u$ 的子树中，以 $u$ 为头的毛毛虫的最大毛毛虫的大小，显然有 $f_u=\max\limits_{v\in son_u}\{f_v\}+1+\max\{0,cnt_u-1\}$，其中 $cnt_u$ 指 $u$ 的儿子个数。</li><li>发现最大的毛毛虫可能横跨两条这样的链，所以更新答案是同时维护最大值和次大值即可。</li></ul></li><li><p>P4284 [SHOI2014] 概率充电器 (3/2)</p><ul><li>概率 + 树形 dp。根据套路，第一次计算子树内的贡献，第二次换根计算全局贡献。发现计算全局贡献时可能重复，所以区分更新前后的 dp 值，求出 $f_{last_u}$ 的转移式，再用其去转移 $f_{now_u}$。</li><li>坑点：如果一个位置一定可以转移则直接转移，跳过转移方程的计算，因为这时转移方程中会出现分母为 $0$ 的情况。</li></ul></li><li><p>P1131 [ZJOI2007] 时态同步 (3/2)</p><ul><li>贴一张绝妙的图解释本题的做法：<img src="/records-2/Sol3.png" alt></li><li>dfs 累加每次调整的代价。</li></ul></li><li><p>P3812 【模板】线性基 (2/1)</p><ul><li>依次将原序列插入线性基，在线性基中从高位向低位枚举更新最大值。</li></ul></li><li><p>CF468C Hack it! (4/0)</p><ul><li>发现 $\forall a &lt; 10^{18}$，把 $[0,10^{18})$ 替换成 $[a,10^{18}+a)$，总代价会增加 $a$，所以有 $\sum\limits_{i=a-p}^{10^{18}+a-p-1}f_i\equiv 0 \mod a$，即 $l=a-p,r=10^{18}+a-p-1$ 时满足条件。</li></ul></li><li><p>P5903 【模板】树上 k 级祖先 (1/2，倍增做法)  </p><ul><li>可以长链剖分做到 $\Theta(n\log n)$ 预处理，$\Theta(1)$ 查询。倍增虽然每次查询是严格的 $\Theta(\log n)$，但表现优秀，可以通过本题。</li></ul></li><li><p>P5431 【模板】乘法逆元 2 (2/1)</p><ul><li>发现原式可以通分一下，维护前缀后缀积，最后在乘上 $\prod a_i$ 的逆元即可。</li></ul></li><li><p>P4822 [BJWC2012] 冻结 (1/2)</p><ul><li>分层图最短路模板，每层向下一层连一条边权为 $\dfrac{k}{2}$ 的边。</li></ul></li><li><p>P2515 [HAOI2010] 软件安装 (3/2)</p><ul><li>将原图缩点后跑树形背包。</li><li>坑点：图可能不联通，背包需要有超级源点。</li><li>不要用 <code>~i</code> 代替 <code>i &gt;= 0</code> 的条件。</li></ul></li><li><p>P4208 [JSOI2008] 最小生成树计数 (4/2)</p><ul><li>关键性质：在一个图的所有最小生成树中，每种边权出现的次数是固定的。</li></ul></li><li><p>P4105 [HEOI2014]南园满地堆轻絮 (2/1)</p><ul><li>Placeholder</li></ul></li><li><p>P1772 [ZJOI2006] 物流运输 (3/3)</p><ul><li>Placeholder</li></ul></li><li><p>P2467 [SDOI2010] 地精部落 (4/1)</p><ul><li>Placeholder</li></ul></li><li><p>LOJ #2873. 「JOISC 2014 Day1」有趣的家庭菜园 (3/2)</p><ul><li>Placeholder</li></ul></li><li><p>P2319 [HNOI2006] 超级英雄 (2/2)</p><ul><li>Placeholder</li></ul></li><li><p>XJOI 1113 - A (2/2)</p><ul><li>Placeholder</li></ul></li><li><p>P3225 [HNOI2012] 矿场搭建 (3/3)</p><ul><li>Placeholder</li></ul></li><li><p>P5854 【模板】笛卡尔树 (2/1)</p><ul><li>Placeholder</li></ul></li><li><p>P5091 【模板】扩展欧拉定理 (3/1)</p><ul><li>Placeholder</li></ul></li><li><p>P7771 【模板】欧拉路径 (2/2)</p><ul><li>Placeholder</li></ul></li><li><p>1115 模拟赛 - 1 mark (2/1)</p><ul><li>将原序列排序，双指针维护。二分最大差值，头指针右移的过程中如果与尾指针所指向的元素之差大于二分值则将尾指针右移。最后统计答案时加上二分位置右侧的一些值补全 $k$ 对。</li></ul></li><li><p>1115 模拟赛 - 2 gift (2/3)</p><ul><li>显然的状压 dp。先 bfs 求出所有礼物两两之间以及与起始、中止节点的距离，再状压，设 $f_{i,S}$ 为已经取了集合为 $S$ 的礼物，上一个取了 $i$ 的最短时间。</li></ul></li><li><p>1115 模拟赛 - 3 game (3/2)</p><ul><li>一个点能吃到其父亲节点的坚果当且仅当比它浅的节点都不选。树剖 + 线段树逐层维护。</li></ul></li><li><p>1115 模拟赛 - 4 medicine (3/2)</p><ul><li>树上背包套路化地利用 dfn 序映射成序列上的 01 背包 $\Theta(n^2)$ 处理。</li></ul></li><li><p>P2279 [HNOI2003] 消防局的设立 (3/1)</p><ul><li>从叶子向上贪心考虑，如果当前节点距离最近的被覆盖点超过 $2$，则覆盖其祖父节点一定最优，因为其祖父节点还可以向上继续覆盖。</li></ul></li><li><p>P1273 有线电视网 (4/2)</p><ul><li>树上分组背包，设 $f_{i,j}$ 为以 $i$ 为根节点的子树中选择 $j$ 个用户，能赚到的钱的最大值，将子树中选不同数量的用户视为不同的组，显然这些组互相冲突。</li><li>转移方程 $f_{u,i}=\max\{f_{u,i-j}+f_{v,j}-e_w\}$，最后输出满足 $f_{1,i}\ge 0$ 最大的 $i$ 即为答案。</li></ul></li><li><p>P1438 无聊的数列 (2/1)</p><ul><li>区间加等差数列，单点查询，等同于在差分序列中区间加区间求和。线段树或树状数组维护均可。</li></ul></li><li><p>P2585 [ZJOI2006] 三色二叉树 (2/2)</p><ul><li>非常直接的思路，设 $f_{i,0/1/2}$ 为 $i$ 染成三种不同颜色时子树中最多有几个点被染成绿色，$g_{i,0/1/2}$ 为子树中最少有几个点被染成绿色，在序列上边加入新节点边转移即可。</li></ul></li><li><p>CF1119A Ilya and a Colorful Walk (2/1)</p><ul><li>对于第一个数，从后向前找到最靠后的不与第一个数相同的位置，对最后一个数同理，取两个结果中较大的一个，一定是全局最优。</li></ul></li><li><p>CF1119C Ramesses and Corner Inversion (2/1)</p><ul><li>每次变换时每行每列一定翻转偶数个格子，记录原矩阵和目标矩阵中不同的元素，如果每行每列不同元素的个数均为偶数则合法。</li></ul></li><li><p>CF1119D Frets on Fire (2/2)</p><ul><li>原题目可以转化为数轴上的覆盖问题。将原序列排序后差分，再将差分数组排序，每次询问二分即可。</li></ul></li><li><p>P7514 [省选联考 2021 A/B 卷] 卡牌游戏 (2/2)</p><ul><li>将 A、B 面放在一起排序，可以发现最终答案一定是中间一个连续段的左右端点之差。考虑用两个指针维护，保证一张牌的两面不被同时选择，同时保证选 A 面的张数不超过限制。</li></ul></li><li><p>P2656 采蘑菇 (2/3)</p><ul><li>缩点 + dp。发现每个强连通分量内的边可以经过无数次，其他边只经过一次。将点权和边权同时考虑在缩点后的 DAG 上更新即可。</li></ul></li><li><p>P1637 三元上升子序列 (2/1)</p><ul><li>树状数组维护 $a_i$ 之前有多少个数小于 $a_i$，以及 $a_i$ 之后有多少个数大于 $a_i$，对于每个位置计算两个值的乘积，将乘积求和即为答案。</li></ul></li><li><p>P5094 [USACO04OPEN] MooFest (3/1)</p><ul><li>树状数组维护，发现最大值不方便处理，所以直接按照 $v$ 升序排序，分类讨论：</li><li>设 $j &lt; i$，对于 $x_i&gt;x_j$ 的情况，可以用两个树状数组，一个统计有多少位置满足条件，另一个维护这些位置的和，答案即为 $x_i$ 乘以满足条件的 $j$ 的个数减去 $\sum x_j$。对于 $x_i&lt;x_j$ 的情况直接用整体减去上述情况的值即可。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Records </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSP-S 2021 游记</title>
      <link href="/csp-s-2021-%E6%B8%B8%E8%AE%B0/"/>
      <url>/csp-s-2021-%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>“我去年也就比今年强一点点。” -ShuKuang  </p><h3 id="Day-15"><a href="#Day-15" class="headerlink" title="Day -15"></a>Day -15</h3><p>十一集训，逃过了月考。  </p><h3 id="Day-14-Day-9"><a href="#Day-14-Day-9" class="headerlink" title="Day -14 ~ Day -9"></a>Day -14 ~ Day -9</h3><p>whk 被竞赛班的同学卷死。  </p><h3 id="Day-8-Day-2"><a href="#Day-8-Day-2" class="headerlink" title="Day -8 ~ Day -2"></a>Day -8 ~ Day -2</h3><p>考了好几场模拟赛，考一场挂一场/kk。还有一次估分 $90$，结果瞎搞被水数据抬到了 $160$，—rp。  </p><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h3><p>听 3z 学长讲二分图，逃掉了考试/cy  </p><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>上午想睡觉，就请假没去机房。下午坐车去秦皇岛，颓了一路。  </p><p>zx鸽鸽在群里说不akcsp就女装，撤回前被成功收藏。  </p><p>考前的世界充满了欢乐的气息。  </p><h3 id="Day-1-上午"><a href="#Day-1-上午" class="headerlink" title="Day 1  上午"></a>Day 1  上午</h3><p><del>（我不会说我们前一天到 $1$ 点多才睡觉）</del>  </p><p>上午因为过于紧张，又摸了，就写了个 ST 的板子，还挂了/kk  </p><p>考前狂背单调队列和 tarjan 的板子，结果一个没考/kk  </p><p>gyx 神仙在人民日报公众号上的评论得了 6k+ 赞。</p><h3 id="Day-1-下午"><a href="#Day-1-下午" class="headerlink" title="Day 1 下午"></a>Day 1 下午</h3><p>经典到考场罚坐半小时。HE 考场从来都没有让考试前动过电脑，所以啥都干不了，只能坐着。电脑屏幕大，键盘新，还是 Win10 系统，好评。  </p><p>$14:25$ 开虚拟机，准备考试。  </p><p>$14:30$ 解密题面，今年密码没有发现任何特殊含义。  </p><p>$14:40$ 读完了所有题，感觉没啥可做的，返回去看 T1。</p><p>$14:50$ 想出了 T1 的正解，从此在挂分的道路上一去不返。</p><p>大概 $15:30$ 写完了 T1，大样例死活过不去，于是去考场外溜了一圈，思路清晰了不少。  </p><p>经历了痛苦的亿些调试，终于在 $16:10$ 左右过了大样例，想对拍但是不会写暴力，就扔了看 T2。</p><p>考场上认为 T1 是个水题（事实上确实是个水题），大家都应该 $45$ min 之内切掉了，感觉一个半小时才做完浪费了不少时间。（“他用优先队列模拟 set，不要用他这种垃圾做法” -ShuKuang）  </p><p>然后经历了痛苦的一个小时，发现后三个题一点不会。考场上根据数据范围能猜出来 T2 区间 dp，但推了好久的式子无果，大概 $17:00$ 开始码 T2，T3 的暴力。</p><p>T2 暴力比正解难写多了/kk，T3 全世界就我没想到可以 $\Theta(2^n)$ 搜索（搜一半就行），拿了 $28$ pts 的 $\Theta(2^{2n})$ 暴力分爬了。  </p><p>最后一个半小时在写暴力调暴力和D自己中度过，完全不知道自己为啥这么菜。  </p><p>$18:25$ 把三道题的代码在 Linux 下测了一下，能过编译，就放心的把文件写好打包了。  </p><p>考完后：</p><p>3z：T2 你们都签上了吗？</p><p>我：？？？</p><p>3z：不就是区间 dp 嘛，我不是给你们讲过好多题吗？</p><p>我：？？？？？  那 dp 状态怎么设啊？</p><p>3z：你就设 $f_{l,r}$ 是 $[l,r]$ 的方案数啊，然后再有几个辅助的 dp 数组写一下就好了啊</p><p>……果然技不如人，还有很大很大的提升空间。</p><p>晚上群里死一般寂静，InfOJ 先出了民间数据，我发现自己 T1 没挂，心态稳了不少。  </p><p>大家考的大多都不好，我 $128$ 还成了高一最高的/jk</p><p>youwike 调 T2 没调出来，最后只得了 T1 的 $100$。ShuKuang，sleeping_crawlers，xixike 的 T1 都挂惨了/kk  </p><p>——所以这就是你们又颓了一晚上的原因？ 是的。  </p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>早晨起晚了，赶紧收拾东西准备上车回家。疫情又严重了，不知道接下来会发生什么。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次的 csp 题目难度较以往难度提高了一些，大家也都考的不是很好。我这次仅剩的优势应该就是没怎么挂分，但论实力和水平还差很远很远，从后三道题一点正解方向的思路都没有就可以看出来。所以，没有别的借口，只有更加的努力提升自己，踏踏实实提升自己的水平和成绩。  </p><p>考场估分：$100+15+28+0=143$  </p><p>InfOJ：$100+10+32+0=142$  </p><p>Luogu：$100+10+28+0=138$  </p><p>HydroOJ：$100+15+28+0=143$  </p><p>小图灵：$100+10+28+0=138$  </p><p>LOJ：$100+5+44+0=149$  </p><p>最终成绩：$100+0+44+0=144$ <del>（T3 为啥 $-1$ 有 16pts 啊）</del></p><p>在归程，我默念你的名字，渴望参加那场无人知晓的庆典。我们感叹命运的不公，留下时代的眼泪。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Invalid password, please try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="22dfe453350f9317973fd26e1130c124c13fdc9fd66f28cb0123de319c1ae1ec">bd25ed9264b080267271e137e33d0ce10d0d63c746cf62e20f15a63403641803a860d39b79edf4eca742c1cf69b7c937e2222fa24a68f6e192608980762d7867cbb6feb6fc2a1e532f2dd7ea76985f5faf196955e28da6bbc44e602f96bc9d69281f4a8b409be142613e4ce902be05d815b84c739bd2b92ecbb382dd09922ea9c76a9245141b30c2d984ba44b12cbd018f43447e2215d762f5ed68397136352b6bffb190bda4893874c04b87fa0c439d39a401da2e3f0e1ba67b4c341d545682d86d543c96f6ec4b943e499fadb357cef1b6244fde88276291a426984ef70177c500002054c70aa513e9d9c70c74aa366b7e952b9f5a24acbdebca4f9ddee9c5b0dd60d68f14cde085ab2c6b41df965b838ecd22c17b4994f417e569e17a1e58ce2c97f0743b78b8d46f6ba71db8b2d5d89e18dd0b8d388c3ae716f664123300085635db0df945ba1d85c0b6616bac0053e156991bb3d41f25c1e0a692ead04a6605b039027611e84b58c57c1a6f946ead141ea974a08476bf8146cfa19f5871080495b9fd47622c21da4c7f54781848509499c2fb46a6d70e619467dcf6f86a5d57d66b5a84bd159fb615f0870aa4699c5a5f840a6b7ebf16efe8ee556144491820ff7b089da5905bdc8462960241cbbcfabf1d83cc232931b251de61da42e844a4e5c2766ef5945b8ed60c4a82d9c5a74e09120600d3f9b262b35df8431fd6909b7ec82e56bcf0ecc2fdd926e54baad9fcf80de6107fc33dd88bff3f1fa22c8a7f0b5b947d78d5c1ed4c46c055f087aad3a02430fe47a8e7790b83b867f3d6ae95ba8f25de8b66bb96146237d4e2799b2f88ea866cbe00ed80c923d35069f2a12896752620e5ca62a532502f1345b6e7b4bf1cf5b79f4197f376c5d906cc5fc5f0516f345be22023bc61491ec8e8442cef34428b0b9deb136b4d278ee63da47dcbe18a7739c5428371e39bfb029b12c9af12bd35014a4d2365864002192f8999af478259c4591ac05dfe3b811a0899cbec8629010db01f09453a7c17e410e4fdfbc91a7b0c20c163569d6328848455d64b15329f25379e0a2dd9f803e51e2322b400c116b4dfb210f65129c652cc7e303d3c38ca846734361d08677afc0225374535421ced69b3054b82122083d2deca40abda1d108b7032c96e8a53e00e611b0415228d991876db13a58ff2424a983ec5bb923c07543af89ced16ce097ec4a9c449bce3a59c0e3a7ccd6a3e8a09836ea70b43272c53941400d5a832f7e90819c3aa75f520e23ba1ed444cda27c3f9265e3a05925c74c447a71d468bf0b49d95e95630802ecb8713e3b532ee84b7e9916421229923fc038b07bd3c0ba9d2260d4505478a7b9f805ffeadb17b58b0aa1051de6a6f1d096e2335239d290ce56bafff98cfd763044572f5d347bb65711a8653df7eb11bd9479b83be24a2a0e5986f0a4ba131437381860e83f3fc82503bd35364efcf13612b9af19cbcd42a009e227aa7033e8cdae491104982f08ca7f51d9f11ef0697656191c1c84434e372e5232c94e101ce3f383014cfa5f9d8b5a056d22f7d0ae3c04c1a3371dc82b3f17427292db738dc7612985f8417a01e0e3e66418cb3bffb9b466d94b7323d201a6d9a745ef73d30298d0bf9f81fc90de465c4f4dd22557f43ca5d5dc98207901502c19cd7c92a52d897c7c923608b99b60379b9c72be801db24af3b52bb1fefe15566004536ec5597cbed0ae04126977d611ef950bc4524c759c3c60adedf1608432d7b28e366e8939a8639f2386063d0a9ddb2dc5dafb10e89b6dfe662adaea0058dc25c1584bddbfc15a3d46a7388f82948697596ae817dec4aeb356265401d743e42930f28b803a4455962bb365bfabffb9ef25e6d48d0e2bb2aa6020d0ad94ab3d71a1de43cb3e897a92d3ef9d28b6b94ad9a1e1ef3ed5040ed248725cbaebcc59c07c139648aaee8e7b24f4fe17ca65c509c2932e3f26fd1b024382c6dfbe7bc90d2856b737f0030baac57eda2c28c2d27984d03d21a08ba8f9c9f8c7c7661a017e35e2d5f40af7b72e3c9748842cb2f4d3927a095c640ae15ff12e9c1d1541ac2033f97a0c2ebf4e031335c52e7141dd60aaa3c4599f54f906f19cd5f5076051b87bd1bb3ec05a0018ee6a9b4e26b1b008455f8f6102e46f3aed0e459065c6803ebba5f85fa693fb620b123cb3808dfa5cf5005dc46a1fb92d860d3bc5effa06183dba7182def3c6254e7324b2981df24e60831632aefda124274a42fa4cfe4b1608407a4d41241afd2a1952b887aa3a4135f97ea663e9062fa02c632d233f1e9efa12015aad19430fb3e3129b535ca98ad1a95b8ee25945196769f095ba4908a2bf924c9cb8b4db0124d511868a665a03f4734e3acc9a1a1bd1c45061e6b5940149c232d6bcd361d8a71c24371428265f3c8bb9c206a052d0ffc7f3a0efbcc873e2f9a686d61a28994a4ef1866e4b3b7fed8b16a49256b16fd494584f1d63e1665370c253794b3a8ee0ca3db16641f183e036c64efa2d1d7aebca025a41381d4c4283a04f1c0edf0eb6d07494702bb2346c39a2fbc52eaf65a2abf6fdb027e8e0d29a6bef7ae99ce1cabc3bfaccc6180b0813d752c5db9b81d358518d46a908a700b935fcf7cd570964ae0d87d47ecbab2496dd0efea75a912ff8142e66000c0eb30a93253089ed0cc000d2d472a73a5a209ef6d0a8dfa35cbc342acc8de831a09a5cc59ed7c9b1baccdd683649a5f6c23b37eac9f4e410d0a68284c6cba40d21c9faf5c1d6623480781b574f3c2e01a6d0684f6e6ba4fc9aac41091851b2c27f9e10f8055f4cf8b832769b61f7ec5309f4f530bb78403324157e936db7d243557eed19fc812ca4bc78ffada85144009d957acc9b94a2c2e99295bed9883d7135e0b2954f89e989d8181a6158e90228368559df2806162aed871498a7cf11e6587dc5e0b94fc900a20947dadd5cb49fd4b95bc859e80dfffbd59b678bebe0f713d4d3d84e30f79dc33c1b197754509feb450472819e38fc154f7726333b08811595993858cfe735b79f2207951dd645a7fdb45cb3f3f9c40c97979adbca322dcdecf6c8487d62ca90cf273a7e9c0dfac998a57275ec7a2456bb3ee1a159607bb4108f833ca9e1626021df5a7f85c9045604e71d593503d764375ad75d4f37b553520e9c47d3a2d72611a1dcb8d19d67336c02821adefec327287561bd706c4ac08d6611eeae173581d9760e23095eac02119d4b14742136742e2417cad53e6bca177d043371d3bda12f1df72631fe908b441587c054d7c0704f01510c2eb2348b708331cc6a8e1aa9294c753eefe9fbaed4029f1e6ee8c1850bd76bcaf2869f3efc83e1ac4d54eeff113adbf1103707eb77c29f886c882d04f9ebfe0fae4ee801275e1f89438e5f3265609b7b81fa39031b999548da04d692c237583889aed9b893f359913fe00ac0eeac869229249d92ebb4bf5e83731aefd7e75a84384a5e3f35576b956a2a56bba83d8d2ef3fc3e1f539bf2af5079804ef4863d321e9fc69b69eea093630d1d2e49b33e82f80f46331b82faf50c0c5c668c3604e37eb655e6d11787b5cb077d1d20bf818d9ed1834d63e83adf2e71d8b2177e8c78e6621d2eef81f18782bdf6bad01c67b66d38e25de4ea9bc54354221bca012f2d44dcc38126bcaecf9ef519728da742dee797fccbb6ef70cd0ae375fa97ce5ba1848cf9862ddb66e2e8cc2b3fb151e39a26fb96cf6d69aec03a4dbe3d39113dc9fcff902651da24a2a71ddd657b3870650ccc1476e5b9f248075aaa834150b9d387a38faf16943280c6c964f9f129879f136a05c06d8ae9860a7f2d090633978fcb29ccb358321a522cc843fa48e0484129dac6ec0e1e8ddcbfca24d087e0bf5067c73015c494ebc5c805f4dcb55267fe2d10d6ef5e56a1b63d601ebeeb4c09fc4bf941b4dbace51222335fca3f34328d075dd0f4d4aca70c3546ab1f28c65c8e5a115cf34567ab2b82abc607da1faeb6ac322a3daad8ec2ac88d368c7ff5c0ad8ac5e4dad371e4e6b9acc90a772691d8547a0e69501172babc3a5706aa162d3c0ebd2a2366e160f2b076e744ea47a5fb06af99889ecad2aad0b48588ed94dce0b59c4dadc5e953be9d481502300b67ea681</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="Enter password to read.">Enter password to read.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见错误总结</title>
      <link href="/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/"/>
      <url>/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>持续更新中~</p><h4 id="0-文件输入-输出"><a href="#0-文件输入-输出" class="headerlink" title="0. 文件输入/输出"></a>0. 文件输入/输出</h4><ul><li>大型考试中，严格加 <code>freopen</code>，同时注意要将输入输出的文件名写对，一定记得删掉测大样例时输入的文件名后缀。</li><li>校内OJ模拟赛时，测完大样例记得删掉 <code>freopen</code>，或在文件前后使用 <code>#ifndef ONLINE_JUDGE</code>。洛谷也不支持文件I/O。</li><li>loj上明确写有＂文件I/O＂的要加文件输入输出。</li></ul><h4 id="1-死循环-不出结果"><a href="#1-死循环-不出结果" class="headerlink" title="1. 死循环/不出结果"></a>1. 死循环/不出结果</h4><ul><li>快读写错。</li><li><code>scanf</code> 忘写取址符 <code>&amp;</code>。  </li><li>多测未赋初值/未清空导致死循环（尤其注意 <code>head</code>、<code>tag</code> 等数组是否清空）。</li><li>在一棵 1 ~ n - 1 的树上深搜到 0 号节点导致死循环。  </li><li>深搜某些条件没有 <code>return</code> 导致死循环。  </li><li>循环条件写错如：<code>for(int j = 1; j &lt;= i; ++i)</code> 之类。  </li><li>网络流 <code>dis</code> 初始化没有使用 <code>memset</code> 导致没有将全部节点的初始 <code>dis</code> 设置为 <code>INF</code>。  </li><li>慎用 <code>~i</code> 代替 <code>i &gt;= 0</code>，可能会因为边界出现一些不希望的死循环问题。</li></ul><h4 id="2-WA"><a href="#2-WA" class="headerlink" title="2. WA"></a>2. WA</h4><ul><li>没有注意数据范围，该开 long long 要开。  </li><li>线段树 <code>pushdown</code> 写挂。  </li><li>取模取挂。  </li><li>如果一直输出 <code>0</code>，检查：<ul><li>快读是不是 <code>return</code> 了读入的数。  <ul><li>是否少读入了某些数。  </li><li>结果为连乘积的时候，<code>ans</code> 的初值是否为 <code>1</code>。  </li></ul></li></ul></li><li>试图 <code>1 &lt;&lt; 32</code> 或 <code>1ll &lt;&lt; 63</code>。  </li><li>位运算未注意优先级。  </li><li>组合数运算时将 <code>fac[n]</code> 写成 <code>n</code>。  </li><li>背包未继承上一层的值导致错误（<code>f[i][j] = f[i - 1][j]</code>）。</li><li>BST 查找右子树排名 <code>k</code> 时减去左子树的 <code>siz</code> 后没有 +1。  </li><li>网络流初始时 <code>cnt</code> 未赋为 <code>1</code>。</li><li>没有删调试语句。  </li><li>没有看清模数。  </li><li><code>siz[y] += siz[x]</code> 之类（写反）。  </li><li>AC 自动机建 fail 树 dfs 时误将 1 当作根节点（<code>dfs(0)</code> 而不是 <code>dfs(1)</code>）  </li><li><code>__builtin_popcount</code> 的范围是 unsigned int，long long 范围内要用 <code>__builtin_popcountll</code>。  </li><li>dfn 序需要映射回原数。（取 id，不是 dfn 序本身）</li><li>检查 vis 数组在该使用 int 类型时是否适用了 bool。</li></ul><h4 id="3-RE"><a href="#3-RE" class="headerlink" title="3. RE"></a>3. RE</h4><ul><li>数组访问越界。</li><li>线段树处理不好的话需要开 $8$ 倍空间。  </li><li>洛谷日爆。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Records </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSP-J/S 2020 游记</title>
      <link href="/csp-j-s-2020-%E6%B8%B8%E8%AE%B0/"/>
      <url>/csp-j-s-2020-%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>这次算是熟悉OI后，第一次参加的正式比赛。虽然去年也参加了CSP-J 2019，但毕竟在当时没有什么经验，甚至不知道怎么用 Windows 系统答题。这次，我的经验比以前丰富了不少，也从中收获了宝贵的大赛体验。</p><h3 id="Day-28"><a href="#Day-28" class="headerlink" title="Day -28"></a>Day -28</h3><p>一阶段考试。考的还可以，但还是没有发挥到最好。</p><h3 id="Day-26"><a href="#Day-26" class="headerlink" title="Day -26"></a>Day -26</h3><p>初赛。md一阶段周五周六考，然后 CSP-J1/S1 周日考？  </p><p>上午 S 组，本着能拿多少分就拿多少的心态去考的，不会的就分析选项，再不会就选 C =_= 交卷前，算算自己会的大概有 $60$，还算稳。HE 的分数线向来不高，记得去年是 $50$ 分……  </p><p>下午 J 组，发挥的一般，还不如去年，原题都做错，自闭了。  </p><h3 id="Day-21"><a href="#Day-21" class="headerlink" title="Day -21"></a>Day -21</h3><p>初赛出成绩，S 组 $81$，J 组 $86.5$。<br>HE 分数线，J/S 都是 $49$ 分。</p><h3 id="Day"><a href="#Day" class="headerlink" title="Day -?"></a>Day -?</h3><p>年级公布学科竞赛时间，正好在 CSP 前一天， <del>不考了不考了，还得去考 CSP 呢</del></p><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h3><p>一阶段表彰，年级 Rk $16$。</p><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>上午还在学校上课。  </p><p>下午坐高铁来到了秦皇岛燕山大学，学校宾馆安静、环境好、条件好，好评。  </p><p>晚上在你谷打了几个板子，又T又WA，索性不打了。<br><del>比赛目标：不爆零</del></p><h3 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h3><p><del>关于 Day 2，它 NOIP 了</del><br>总共就一天，上午 J 组，下午 S 组。 </p><p>$7:30$ 上车，想着 J 组不慌，当练手了。考前很淡定（其实并不该这么淡定）。<br>$8:30$ 准时发卷。密码“他 山 之 石”。<br>吸取以往模拟赛和洛谷月赛的经验教训，先把所有题都读了一遍。发现 T1 是水题，T2 跟去年类似，是个模拟，T3 跟后缀表达式有关，像个神仙题，T4 显然 DP。<br>$8:40$ 把文件夹都建好，开始答 T1。简单地二进制拆一下就行，把给出的 $n$ 中每一位是 $1$ 的标记出来，从大到小输出即可。<br>$8:50$ 过了 T1 大样例，又自己手动模拟了几组数据，觉得没什么问题，转 T2。数据范围 $n \le 10^5$，突然想到去年 transfer 惨案，于是果断想 $O(n\log n)$ 的算法。发现可以开两个优先队列，一个存所有目前在分数线上的，一个存线下的。后来发现如果一群分数相同的一直在两个堆里倒来倒去，那还不如不开……然后猛然想到可以桶排，那样队列里只用存几个不同的分数就行了。每次输出时输出堆顶元素即可。1h 过了大样例，感觉还可以，开 T3。<br>T3 好不容易看懂了，发现不会，打了 $O(n^2)$ 暴力爬了。<br>T4 知道是 DP，直接爆搜，骗 $20$ 分走人。<br>不知道哪里浪费了那么多的时间，这时只剩下 30 min，回到 T3，发现前 $20\%$ 的数据简直是白给。快速地把那 $20$ 分骗到手，返回检查 T2，写了个 generator，发现极限数据能跑过，心里稳了不少。<br>然后就基本到点了，检查了下文件，正好 $11:58$。<br>出场，发现 T2 可以直接 $O(600n)$ 暴力扫一遍，那我还写啥优先队列啊/fad<br>估分：$100 + 100 + 50 + 20 = 270$<br>洛谷：$100 + 100 + 50 + 20 = 270$<br>信奥题库：$100 + 100 + 50 + 20 = 270$  </p><p>下午考 S 组。第一次考 S 组，心里还是有点慌。<br>$14:00$ 进考场，干等了半个小时。<br>$14:30$ 发卷，结果密码错误。以为自己眼花，重新输了一遍，结果还不对。这个时候发现整个考场都输不对密码，有人便问监考老师。把“k”改成了大写，还是不对，监考过了整整一分钟才发现还有一对括号（）<br>下午密码：可 以 攻 玉<br>开题。发现 T1 的出题人危，T2、3、4 都看不太懂。<br>咬定 T1 大模拟拿时间就可以换分，开始硬刚 T1。心想反正 T3、T4 也不会，前面能拿多少拿多少吧。<br>采用分段的思想，先考虑公元前的情况，再写 1-1-1 到 1582-10-4 的情况，最后再想 1582-10-15 之后的情况。每种情况都很复杂……尤其是 debug 的时候，简直不能更酸爽……那个 $1721442 (4713\times365+1197)$ 和 $2299160 (1721442+1581\times365+395+277)$ 附近的数不知被我敲了多少遍。<br>2h，终于过了大样例。开始转战 T2。<br>发现 T2 题面恶心，有好多没用的东西，其实还是挺水的（考场上思路很混乱，想复杂了，所幸乱搞没挂）。晚上回酒店刷你谷讨论区才发现没特判 $n=0$，$k=64$ 的情况。 <del>话说这谁想得到啊</del><br>T3 题面太长，先跳了。看 T4，发现是个神仙思维题，有 $20$ 分 $n=3$ 好评。写了 $20$，也发现不了 T4 更多的性质，就扔了。<br>回来看 T3，发现最裸的暴力都打不出来。敲了 40 min，发现调不过样例。这时候只剩 10 min 了，就弃掉了 T3，返回去检查文件。<br>就这样考完了。<br>果不其然，考完后大家向 T1 出题人致以了诚挚的问候（（<br>发现过了 T1 的竟然不多？可能大佬都没把时间浪费在 T1 上吧……<br>估分：$100 + ? + 0 + 20 = 120+?$<br>luogu：$100 + 95 + 0 + 10 =205$<br>话说 T4 怎么挂了 $10$ 分啊喂<br>漫长的一天，就这样考完了。<br>如果 HE 分数线低，我貌似还能拿 S 组 1=？<br>我难道能有蓝勾了？/se</p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>回到sjz。  </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次算是超常发挥，或是说幸运。S 组考了一道大模拟，正好让我可以用考场上的时间堆出一个对我来说不错的分数。同时，上下午都没怎么涉及图论与数据结构，也没有恶心的字符串，可以说那些以往常考的、我不会的，这次好多都没考。还有，不挂分其实是这一切的核心。比如 S 组 T1 满分，其实给了我很大的优势。但 J/S 组 3/4 题都完全不会正解，可见总体的算法水平还远低于同年级的，更不用说高年级的，大佬们。<br>同时，这也是我初中生涯中最后一次 CSP 了，明年，我将成为正式的高中选手，希望到时候能够有质的飞跃，甚至于进入 NOI，都将从不可能变为可能。<br>而我，也将不断努力， <del>不断加强whk</del>，在自己在 OI 上开辟的道路中，坚强的前行。</p><h3 id="Upd"><a href="#Upd" class="headerlink" title="Upd:"></a>Upd:</h3><p>CSP-J: $100+100+50+20=270$<br>CSP-S: $100+85+10+20=215$，HE Rk $15$</p><p><strong>—END—</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Friends Link</title>
      <link href="/friends-link/"/>
      <url>/friends-link/</url>
      
        <content type="html"><![CDATA[<p>北校同学：<br><a href="https://shu-kuang.github.io"><img src="/friends-link/168223.png" alt="ShuKuang"></a> <a href="https://xixike.github.io"><img src="/friends-link/158846.png" alt="xixike"></a> <a href="https://www.cnblogs.com/acestar/"><img src="/friends-link/211300.png" alt="Acestar"></a>  </p><p>南校同学：<br><a href="https://baoshuo.ren/"><img src="/friends-link/168214.png" alt="宝硕"></a> <a href="https://www.luogu.com.cn/user/304572/"><img src="/friends-link/304572.png" alt="_CloudySky_"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Friends </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
